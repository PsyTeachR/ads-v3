{
  "hash": "66d5de39c3ef46afa9116456381bf0a5",
  "result": {
    "engine": "knitr",
    "markdown": "# Reports with R Markdown {#sec-reports}\n\n## Intended Learning Outcomes {#sec-ilo-reports .unnumbered}\n\n-   Be able to structure a project\n-   Be able to knit a simple reproducible report with R Markdown\n-   Be able to create code chunks, tables, images, and inline R in an R Markdown document\n\n## Functions used {#functions-reports}\n\n\n\n\n\n* built-in (you can always use these without loading any packages)\n    * base:: `max()`, `min()`, `nrow()`, `str()`, `summary()`\n    * utils:: `View()`\n* tidyverse (you can use all these with `library(tidyverse)`)\n    * readr:: `read_csv()`, `row_spec()`\n    * dplyr:: `count()`, `filter()`\n    * ggplot2:: `geom_bar()`, `geom_col()`, `ggplot()`, `labs()`\n* other (you need to load each package to use these)\n    * knitr:: `include_graphics()`, `kable()`\n    * kableExtra:: `kable_classic()`, `row_spec()`\n    * tinytex:: `install_tinytex()`  \n    \n\n\n\nDownload the [R Markdown Cheat Sheet](https://www.rstudio.org/links/r_markdown_cheat_sheet){download=\"\"}\n\n## Walkthrough video {#sec-walkthrough-reports .unnumbered}\n\nThere is a walkthrough video of this chapter available via [Echo360.](https://echo360.org.uk/media/6b6c1c8f-c24f-44c1-9e43-988fe577ce5b/public) Please note that there may have been minor edits to the book since the video was recorded. Where there are differences, the book should always take precedence.\n\n## Setup {#sec-setup-reports}\n\nFor reference, here are the packages we will use in this chapter. You may need to install them, as explained in @sec-install-package, if running the code below in the console pane gives you the error `Error in library(package_name) : there is no package called ‘packagename’`. \n\n\n::: {.cell layout-align=\"center\" filename='Chapter packages'}\n\n```{.r .cell-code}\nlibrary(tidyverse)  # various data manipulation functions\nlibrary(knitr)      # for rendering a report from a script\nlibrary(rmarkdown)  # for using R markdown\nlibrary(kableExtra) # for styling tables\n```\n:::\n\n\n## Organising a project {#sec-projects}\n\nBefore we write any code, first, we need to get organised. <a href='https://psyteachr.github.io/glossary/p#project' target='_blank' class='glossary' title='A way to organise related files in RStudio'>Projects</a> in RStudio are a way to group all the files you need for one project. Most projects include <a href='https://psyteachr.github.io/glossary/s#script' target='_blank' class='glossary' title='A plain-text file that contains commands in a coding language, such as R.'>scripts</a>, data files, and output files like the PDF report created by the script or images.\n\n### Default working directory\n\nFirst, make a new <a href='https://psyteachr.github.io/glossary/d#directory' target='_blank' class='glossary' title='A collection or “folder” of files on a computer.'>directory</a> (i.e., folder) on your computer where you will keep all of your R projects. Name it something like \"R-projects\" (avoid spaces and other special characters). Make sure you know how to get to this directory using your computer's Finder or Explorer. \n\n::: {.callout-caution}\n## Avoid networked drives\n\nIf possible, don't use a network or cloud drive (e.g., OneDrive or Dropbox), as this can sometimes cause problems. If you're working from a networked drive and you are having issues, a helpful test is to try moving your project folder to the desktop to see if that solves the problem.\n:::\n\nNext, open <if>Tools > Global Options...</if>, navigate to the <if>General</if> pane, and set the \"Default working directory (when not in a project)\" to this directory. Now, if you're not working in a project, any files or images you make will be saved in this <a href='https://psyteachr.github.io/glossary/w#working-directory' target='_blank' class='glossary' title='The filepath where R is currently reading and writing files.'>working directory</a>. \n\n::: {.callout-caution}\n## Avoid long path names\n\nOn some versions of Windows 10 and 11, it can cause problems if path names are longer than 260 characters. Set your default working directory to a path with a length well below that to avoid problems when R creates temporary files while rendering a report. If you are having issues, a helpful test is to try moving your project folder to the desktop to see if that solves the problem as this will likely have a much short path name than most other folders on your computer.\n:::\n\nYou can set the working directory to another location manually with menu commands: <if>Session > Set Working Directory > Choose Directory...</if> However, there's a better way of organising your files by using Projects in RStudio.\n\n\n### Start a Project {#sec-project-start}\n\nStart by making a directory inside your default project directory where you will keep all of your materials for this class; we'd suggest naming it something like `ADS-23`. \n\nTo create a new project for the work we'll do in this chapter:\n\n-   <if>File > New Project...</if>\n-   Name the project <code class='path'>02-reports</code>\n-   Save it inside the `ADS-23` directory\n\nRStudio will restart itself and open with this new project directory as the working directory.\n\n::: {#fig-new-proj layout-ncol=3}\n\n![](images/reports/new_proj_1.png)\n\n![](images/reports/new_proj_2.png)\n\n![](images/reports/new_proj_3.png)\n\nStarting a new project.\n:::\n\nClick on the Files tab in the lower right pane to see the contents of the project directory. You will see a file called `02-reports.Rproj`, which is a file that contains all of the project information. When you're in the Finder/Explorer, you can double-click on it to open up the project.\n\n::: {.callout-note}\n## Dot files\n\nDepending on your settings, you may also see a directory called `.Rproj.user`, which contains your specific user settings. You can ignore this and other \"invisible\" files that start with a full stop.\n:::\n\n::: {.callout-caution}\n## Don't nest projects\n\nDon't ever save a new project **inside** another project directory. This can cause some hard-to-resolve problems.\n:::\n\n### Naming Things {#sec-naming}\n\nBefore we start creating new files, it's important to review how to name your files. This might seem a bit pedantic, but following clear naming rules so that both people and computers can easily find things will make your life much easier in the long run. Here are some important principles:\n\n-   file and directory names should only contain letters, numbers, dashes, and underscores, with a full stop (`.`) between the file name and <a href='https://psyteachr.github.io/glossary/e#extension' target='_blank' class='glossary' title='The end part of a file name that tells you what type of file it is (e.g., .R or .Rmd).'>extension</a> (that means no spaces!)\n-   be consistent with capitalisation (set a rule to make it easy to remember, like always use lowercase)\n-   use underscores (`_`) to separate parts of the file name, like the title and date, and dashes (`-`) to separate words in each part (e.g., `social-media-report_2021-10.Rmd`)\n-   name files with a pattern that alphabetises in a sensible order and makes it easy for you to find the file you're looking for\n-   prefix a file name with an underscore to move it to the top of the list, or prefix all files with numbers to control their order\n\nFor example, these file names are a mess:\n\n-   <code class='path'>report.doc</code>\n-   <code class='path'>report final.doc</code>\n-   <code class='path'>Data (Customers) 11-15.xls</code>\n-   <code class='path'>Customers Data Nov 12.xls</code>\n-   <code class='path'>final report2.doc</code>\n-   <code class='path'>project notes.txt</code>\n-   <code class='path'>Vendor Data November 15.xls</code>\n\nHere is one way to structure them so that similar files have the same structure and it's easy for a human to scan the list or to use code to find relevant files. See if you can figure out what the last one should be.\n\n-   <code class='path'>_project-notes.txt</code>\n-   <code class='path'>report_v1.doc</code>\n-   <code class='path'>report_v2.doc</code>\n-   <code class='path'>report_v3.doc</code>\n-   <code class='path'>data_customer_2021-11-12.xls</code>\n-   <code class='path'>data_customer_2021-11-15.xls</code>\n-   <select class='webex-select'><option value='blank'></option><option value=''>vendor-data_2021-11-15.xls</option><option value=''>data-vendor-2021_11_15.xls</option><option value='answer'>data_vendor_2021-11-15.xls</option><option value=''>data_2021-11-15_vendor.xls</option></select>\n\n::: {.callout-note .try}\n## Naming practice\n\nThink of other ways to name the files above. Look at some of your own project files and see what you can improve.\n:::\n\n## R Markdown {#sec-rmarkdown}\n\nThroughout this course we will use <a href='https://psyteachr.github.io/glossary/r#r-markdown' target='_blank' class='glossary' title='The R-specific version of markdown: a way to specify formatting, such as headers, paragraphs, lists, bolding, and links, as well as code blocks and inline code.'>R Markdown</a> to create reproducible reports with a table of contents, text, tables, images, and code. The text can be written using <a href='https://psyteachr.github.io/glossary/m#markdown' target='_blank' class='glossary' title='A way to specify formatting, such as headers, paragraphs, lists, bolding, and links.'>markdown</a>, which is a way to specify formatting, such as headers, paragraphs, lists, bolding, and links.\n\n### New document\n\nTo open a new R Markdown document, click <if>File > New File > R Markdown</if>. You will be prompted to give it a title; title it `Important Info`. You can also change the author name. Keep the output format as HTML.\n\nOnce you've opened a new document be sure to save it by clicking <if>File > Save As...</if>. You should name this file `important_info` (if you are on a Mac and can see the file <a href='https://psyteachr.github.io/glossary/e#extension' target='_blank' class='glossary' title='The end part of a file name that tells you what type of file it is (e.g., .R or .Rmd).'>extension</a>, name it `important_info.Rmd`). This file will automatically be saved in your project folder (i.e., your working directory) so you should now see this file appear in your file viewer pane.\n\nWhen you first open a new R Markdown document you will see a bunch of welcome text that looks like this:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![New R Markdown text](images/reports/markdown-default.png){#fig-markdown-default fig-align='center' width=100%}\n:::\n:::\n\n\nDo the following steps:\n\n-   Change the title to \"Important Information\" and the author to your name\n-   Delete **everything** after the setup chunk\n-   Skip a line after the setup chunk and type \"## My info\" (with the hashes but without the quotation marks); make sure there are no spaces before the hashes and at least one space after the hashes before the subtitle\n-   Skip a line and click the insert new code menu (a green box with a C and a plus sign) then choose <if>R</if>\n\nYour Markdown document should now look something like this:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![New R chunk](images/reports/new-chunk.png){#fig-new-chunk fig-align='center' width=100%}\n:::\n:::\n\n\n### Code chunks {#sec-code-chunks}\n\nWhat you have created is a subtitle and a **code chunk**. In R Markdown, anything written in a grey code chunk is assumed to be code, and anything written in the white space (between the code chunks) is regarded as normal text (the actual colours will depend on which theme you have applied, but we will refer to the default white and grey). This makes it easy to combine both text and code in one document.\n\n::: {.callout-caution}\n## Code chunk errors\n\nWhen you create a new code chunk you should notice that the grey box starts and ends with three back ticks \\`\\`\\`. One common mistake is to accidentally delete these back ticks. Remember, code chunks and text entry are different colours - if the colour of certain parts of your Markdown doesn't look right, check that you haven't deleted the back ticks.\n:::\n\n\nIn your code chunk, write the code you created in @sec-objects.\n\n\n::: {.cell layout-align=\"center\" filename='important_info.Rmd'}\n\n```{.r .cell-code}\nname <- \"Emily\"\nage <- 36\ntoday <- Sys.Date()\nchristmas <- as.Date(\"2024-12-25\")\n```\n:::\n\n\n::: {.callout-note}\n## Console vs Scripts\n\nIn @sec-intro, we asked you to type code into the console. Now, we want you to put code into code chunks in R Markdown files to make the code reproducible. This way, you can re-run your code any time the data changes to update the report, and you or others can inspect the code to identify and fix any errors. \n\nHowever, there will still be times that you need to put code in the console instead of in a script, such as when you install a new package. In this book, code chunks will be labelled with whether you should run them in the console or add the code to a script.\n:::\n\n### Running code\n\nWhen you're working in an R Markdown document, there are several ways to run your lines of code.\n\nFirst, you can highlight the code you want to run and then click <if>Run > Run Selected Line(s)</if>, however this is tedious and can cause problems if you don't highlight *exactly* the code you want to run.\n\nAlternatively, you can press the green \"play\" button at the top-right of the code chunk and this will run **all** lines of code in that chunk.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Click the green arrow to run all the code in the chunk.](images/reports/run-all.png){#fig-run-all fig-align='center' width=100%}\n:::\n:::\n\n\n\nEven better is to learn some of the keyboard short cuts for R Studio. To run a single line of code, make sure that the cursor is in the line of code you want to run (it can be anywhere) and press <pc>Ctrl+Enter</pc> or <mac>Cmd+Enter</mac>. If you want to run all of the code in the code chunk, press <pc>Ctrl+Shift+Enter</pc> or <mac>Cmd+Shift+Enter</mac>. Learn these short cuts; they will make your life easier!\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Use the keyboard shortcut to run only highlighted code, or run one line at a time by placing the cursor on a line without highlighting anything.](images/reports/run3.gif){#fig-run3 fig-align='center' width=100%}\n:::\n:::\n\n\nRun your code using each of the methods above. You should see the variables `name`, `age`, `today`, and `christmas` appear in the environment pane. (Restart R to reset.)\n\n### Inline code {#sec-rmd-inline-r }\n\nWe keep talking about using R Markdown for reproducible reports, but it's easier to show you than tell you why this is so powerful and to give you an insight into how this course will (hopefully!) change the way you work with data forever!\n\nOne important feature of R Markdown is that you can combine text and code to insert values into your writing using **inline coding**. If you've ever had to copy and paste a value or text from one file to another, you'll know how easy it can be to make mistakes. Inline code avoids this. Again it's easier to show you what inline code does rather than to explain it so let's have a go.\n\nFirst, copy and paste this text to the **white space underneath** your code chunk. If you used a different variable name than `christmas`, you should update this with the name of the object you created, but otherwise don't change anything else.\n\n\n\n```{.md}\nMy name is `r name` and I am `r age` years old. \nIt is `r christmas - today` days until Christmas, \nwhich is my favourite holiday.\n```\n\n\n:::{.callout-caution}\n## Displaying Plots\n\nYou cannot display a plot using inline R. Plots should be displayed from code chunks. We'll come back to how to do this soon.\n:::\n\n### Knitting your file {#sec-rmd-knit}\n\nNow we are going to <a href='https://psyteachr.github.io/glossary/k#knit' target='_blank' class='glossary' title='To create an HTML, PDF, or Word document from an R Markdown (Rmd) document'>knit</a>, or compile, the file into a document type of our choosing. In this case we'll create a default html file, but you will learn how to create other files like Word and PDF throughout this course. To knit your file, click <if>Knit > Knit to HMTL</if>.\n\nR Markdown will create and display a new HTML document, but it will also automatically save this file in your working directory.\n\nAs if by magic, that slightly odd bit of text you copied and pasted now appears as a normal sentence with the values pulled in from the objects you created.\n\n> My name is Emily and I am 36 years old. It is 239 days until Christmas, which is my favourite holiday.\n\n::: {.callout-note collapse=\"true\"}\n## Knitting with Code\n\nYou can also knit by typing the following code into the console. Never put this in an Rmd script itself, or it will try to knit itself in an infinite loop.\n\n\n::: {.cell layout-align=\"center\" filename='Run in the console'}\n\n```{.r .cell-code}\nrmarkdown::render(\"important_info.Rmd\")\n\n# alternatively, you can use this, but may get a warning\nknitr::knit2html(\"important_info.Rmd\")\n```\n:::\n\n:::\n\n## Loading data\n\nNow let's try another example of using Markdown, but this time rather than using objects we have created from scratch, we will read in a data file.\n\nSave and close your `important_info.Rmd` document. Then open and save a new Markdown document, this time named `sales_data.Rmd`. You can again get rid of everything after the setup chunk.  Add `library(tidyverse)` to the setup chunk so that tidyverse functions are available to your script.\n\n\n::: {.cell layout-align=\"center\" verbatim='r setup, include=FALSE'}\n<div class='verbatim'><pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;{r setup, include=FALSE}</code></pre>\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = TRUE)\nlibrary(tidyverse)\n```\n\n<pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;</code></pre></div>\n:::\n\n\n\n### Online sources {#sec-loading-online}\n\nFirst, let's try loading data that is stored online. Create a code chunk in your document and copy, paste, and run the below code. This code loads some simulated sales data.\n\n-   The data is stored in a `.csv` file so we're going to use the `read_csv()` function to load it in.\n-   Note that the url is contained within double quotation marks - it won't work without this.\n\n\n::: {.cell layout-align=\"center\" filename='sales_data.Rmd'}\n\n```{.r .cell-code}\nsales_online <- read_csv(\"https://psyteachr.github.io/ads-v2/data/sales_data_sample.csv\")\n```\n:::\n\n\n::: {.callout-warning}\n## Could not find function\n\nIf you get an error message that looks like:\n\n> Error in read_csv(\"https://psyteachr.github.io/ads-v2/data/sales_data_sample.csv\") :  \n>  could not find function \"read_csv\"\n\nThis means that you have not loaded tidyverse. Check that `library(tidyverse)` is in the setup chunk and that you have run the setup chunk.\n:::\n\nThis dataset is simulated sales data for different types of vehicles (originally from [Kaggle](https://www.kaggle.com/kyanyoga/sample-sales-data)) where each line of data is a single order. There are multiple ways to view and check a dataset in R. Do each of the following and make a note of what information each approach seems to give you. If you'd like more information about each of these functions, you can look up the help documentation with `?function`:\n\n-   Click on the `sales_online` object in the environment pane\n-   Run `head(sales_online)` in the console\n-   Run `summary(sales_online)` in the console\n-   Run `str(sales_online)` in the console\n-   Run `View(sales_online)` in the console\n\n### Local data files\n\nMore commonly, you will be working from data files that are stored locally on your computer. But where should you put all of your files? You usually want to have all your scripts and data files for a single project inside one folder on your computer, that project's <a href='https://psyteachr.github.io/glossary/w#working-directory' target='_blank' class='glossary' title='The filepath where R is currently reading and writing files.'>working directory</a>, and we have already set up the main directory <code class='path'>02-reports</code>for this chapter.\n\nYou can organise files in subdirectories inside this main project directory, such as putting all raw data files in a subdirectory called <code class='path'>data</code> and saving any image files to a subdirectory called <code class='path'>images</code>. Using subdirectories helps avoid one single folder becoming too cluttered, which is important if you're working on big projects.\n\nIn your <code class='path'>02-reports</code> directory, create a new folder named <code class='path'>data</code>, [download a copy of the sales data file](https://psyteachr.github.io/ads-v2/data/sales_data_sample.csv){download=\"\"}, and save it in this new subdirectory.\n\nTo load in data from a local file, again we can use the `read_csv()` function, but this time rather than specifying a url, give it the subdirectory and file name.\n\n\n::: {.cell layout-align=\"center\" filename='sales_data.Rmd'}\n\n```{.r .cell-code}\nsales_local <- read_csv(\"data/sales_data_sample.csv\")\n```\n:::\n\n\n::: {.callout-tip}\n## Tab-autocomplete file names\n\nUse tab auto-complete when typing file names in a code chunk. After you type the first quote, hit tab to see a drop-down menu of the files in your working directory. You can start typing the name of the subdirectory or file to narrow it down. This is really useful for avoiding annoying errors because of typos or files not being where you expect.\n:::\n\nThings to note:\n\n-   You must include the file extension (in this case `.csv`)\n-   The subdirectory folder name (`data`) and the file name are separated by a forward slash `/`\n-   Precision is important, if you have a typo in the file name it won't be able to find your file; remember that R is case sensitive - `Sales_Data.csv` is a completely different file to `sales_data.csv` as far as R is concerned.\n\n::: {.callout-note .try}\n## View sales_local\n\nRun `head()`, `summary()`, `str()`, and `View()` on `sales_local` to confirm that the data is the same as `sales_online`.\n:::\n\n## Writing a report\n\nWe're going to write a basic report for this sales dataset using R Markdown to show you some of the features. We'll be expanding on almost every bit of what we're about to show you throughout this course; the most important outcome is that you start to get comfortable with how R Markdown works and what you can use it to do. \n\n### Data analysis\n\nFor this report we're just going to present some simple sales stats for three types of vehicles: planes, motorcycles, and classic cars. We'll come back to how to write this kind of code yourself in @sec-summary. For now, see if you can follow the logic of what the code is doing via the code comments.\n\nCreate a new code chunk, then copy, paste and run the following code and then view `sales_counts` by clicking on the object in the environment pane. Note that it doesn't really matter whether you use `sales_local` or `sales_online` in the first line as they're identical.\n\n\n::: {.cell layout-align=\"center\" filename='sales_data.Rmd'}\n\n```{.r .cell-code}\n# keep only the data from planes, motorcycles, and cars\nsales_pmc <- filter(sales_online,\n         PRODUCTLINE %in% c(\"Planes\", \"Motorcycles\", \"Classic Cars\"))\n\n# count how many are in each PRODUCTLINE\nsales_counts <-count(sales_pmc, PRODUCTLINE)\n```\n:::\n\n\nBecause each row of the dataset is a sale, this code gives us a nice and easy way of seeing how many sales were made of each type of vehicle; it just counts the number of rows in each group.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|PRODUCTLINE  |   n|\n|:------------|---:|\n|Classic Cars | 967|\n|Motorcycles  | 331|\n|Planes       | 306|\n\n</div>\n:::\n:::\n\n\n::: {.callout-note}\nJust putting an object by itself on a line \"prints\" it. @sec-rmd-tables will show you how to print the table in different formats for your report.\n:::\n\n### Text formatting {#sec-markdown}\n\nYou can use the visual <a href='https://psyteachr.github.io/glossary/m#markdown' target='_blank' class='glossary' title='A way to specify formatting, such as headers, paragraphs, lists, bolding, and links.'>markdown</a> editor if you have RStudio version 1.4 or higher. This will be a button at the top of the source pane and the menu options should be very familiar to anyone who has worked with software like Microsoft Word.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The visual editor.](images/reports/visual-editor.png){#fig-visual-editor fig-align='center' width=100%}\n:::\n:::\n\n\nThis is useful for complex styling, but you can also use these common plain-text style markups:\n\n-   Headers are created by prefacing subtitles with one or more hashes (`#`) and a space (do not exclude the space). If you include a table of contents, this will be created from your document headers.\n-   Format text with *italics* or **bold** by surrounding the text with one or two asterisks or underscores.\n-   Make lists using numbers, asterisks or dashes before items. Indent items to make nested lists.\n-   Make links like this: `[psyTeachR](https://psyteachr.github.io/)`\n-   Download the [R Markdown Cheat Sheet](https://www.rstudio.org/links/r_markdown_cheat_sheet) to learn more.\n\nCopy and paste the below text into the white space below the code chunk that loads in the data. Save the file and then click knit to view the results. It will look a bit messy for now as it contains the code and messages from loading the data but don't worry, we'll get rid of that soon.\n\n\n\n```{.md}\n## Sample sales report\n\nThis report summarises the sales data for different types of vehicles sold between 2003 and 2005. This data is from [Kaggle](https://www.kaggle.com/kyanyoga/sample-sales-data).\n\n### Sales by type\n\nThe *total* number of **planes** sold was `r sales_counts$n[3]`\n\nThe *total* number of **classic cars** sold was `r sales_counts$n[1]`.\n```\n\n\n\n::: {.callout-warning}\nThe example markdown above (and in the rest of this book) is shown for the regular editor, not the visual editor. In the visual editor, you won't see the hashes that create headers, or the asterisks that create bold and italic text. You also won't see the backticks that demarcate inline code.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The example code above shown in the visual editor.](images/reports/visual-editor-example.png){fig-align='center' width=100%}\n:::\n:::\n\n\nIf you try to add the hashes, asterisks and backticks to the visual editor, you will get frustrated as they disappear. If you succeed, your code in the regular editor will look mangled like this:\n\n\n\n```{.md}\n\\#\\#\\# Sales by type\n\nThe \\*total\\* number of \\*\\*planes\\*\\* sold was \\`r sales_counts\\$n\\[3]\\`\n```\n\n\n:::\n\nTry and match up the inline code with what is in the `sales_counts` table. Of note:\n\n* The `$` sign is used to indicate specific variables (or columns)  in an object using the `object$variable` syntax. \n* Square brackets with a number e.g., `[3]` indicate a particular observation\n* So `sales_counts$n[3]` asks the inline code to display the third observation of the variable `n` in the dataset `sales_online`.\n\n::: {.callout-note .try}\n## Further Practice\n\nAdd another line that reports the total numbers of **motorcycles** using inline code. Using either the visual editor or text markups, add in bold and italics so that it matches the others.\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\n\n```{.md}\nThe *total* number of **motorcycles** sold was `r sales_counts$n[2]`.\n```\n\n\n</div>\n\n\n:::\n\n### Code comments {#sec-comments}\n\nIn the above code we've used code **comments** and it's important to highlight how useful these are. You can add comments inside R chunks with the hash symbol (`#`). R will ignore characters from the hash to the end of the line.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# important numbers\n\nn <- nrow(sales_online) # the total number of sales (number of rows)\nfirst <- min(sales_online$YEAR_ID) # the first (minimum) year\nlast <- max(sales_online$YEAR_ID) # the last (maximum) year\n```\n:::\n\n\nIt's usually good practice to start a code chunk with a comment that explains what you're doing there, especially if the code is not explained in the text of the report.\n\nIf you name your objects clearly, you often don't need to add clarifying comments. For example, if I'd named the three objects above `total_number_of_sales`, `first_year` and `last_year`, I would omit the comments. It's a bit of an art to comment your code well, but try to add comments as you're working through this book - it will help consolidate your learning and when future you comes to review your code, you'll thank past you for being so clear.\n\n### Images {#sec-rmd-images}\n\nAs the saying goes, a picture paints a thousand words and sometimes you will want to communicate your data using visualisations. \n\nCreate a code chunk to display a graph of the data in your document after the text we've written so far. We'll use some code that you'll learn more about in @sec-viz to make a simple bar chart that represents the sales data -- focus on trying to follow how bits of the code map on to the plot that is created.\n\nCopy and paste the below code. Run the code in your Markdown to see the plot it creates and then knit the file to see how it is displayed in your document.\n\n\n::: {.cell layout-align=\"center\" filename='sales_data.Rmd'}\n\n```{.r .cell-code}\nggplot(data = sales_counts, \n       mapping = aes(x = PRODUCTLINE, \n                     y = n, \n                     fill = PRODUCTLINE)) +\n  geom_col(show.legend = FALSE) +\n  labs(x = \"Type of vehicle\",\n       y = \"Number of sales\",\n       title = \"Sales by vehicle type\",\n       subtitle = \"2003 - 2005\")\n```\n\n::: {.cell-output-display}\n![](02-reports_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nYou can also include images that you did not create in R using the markdown syntax for images or `knitr::include_graphics()`. This is very similar to loading data in that you can either use an image that is stored on your computer, or via a url.  \n\nCreate a new code chunk underneath each of the sales figures for planes, classic cars, and motorcycles and add in an image from Google or Wikipedia for each (right click on an image and select copy image address to get a url). See the section on [chunk defaults](#rmd-setup) to see how to change the display size.\n\n\n::: {.cell layout-align=\"center\" filename='sales_data.Rmd'}\n\n```{.r .cell-code}\nknitr::include_graphics(\"https://upload.wikimedia.org/wikipedia/commons/3/3f/P-51_Mustang_edit1.jpg\")\n```\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Image Licenses\n\nMost images on Wikipedia are public domain or have an open license. You can search for images by license on Google Images by clicking on the <if>Tools</if> button and choosing \"Creative Commons licenses\" from the \"Usage Rights\" menu.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/reports/google-images.png){fig-align='center' fig-alt='Screenshot of Google Images interface with Usage Rights selections open.' width=100%}\n:::\n:::\n\n:::\n\nAlternatively, you can use the markdown notation `![caption](url)` to show an image. This goes in the markdown text section of the document, not inside is grey code block. The caption is optional; you can omit it like this: \n\n`![](images/reports/google-images.png)`\n\n\n### Tables {#sec-rmd-tables}\n\nRather than a figure, we might want to display our data in a table. \n\n* Add a new level 2 heading (two hashtags) to your document, name the heading \"Data in table form\" and then create a new code chunk below this. \n\nFirst, let's see what the table looks like if we don't make any edits. Simply write the name of the table you want to display in the code chunk (in our case `sales_counts`) and then click knit to see what it looks like.\n\n\n::: {.cell layout-align=\"center\" filename='sales_data.Rmd'}\n\n```{.r .cell-code}\nsales_counts\n```\n:::\n\n\n```\n## # A tibble: 3 × 2\n## # Groups:   PRODUCTLINE [3]\n##   PRODUCTLINE      n\n##   <chr>        <int>\n## 1 Classic Cars   967\n## 2 Motorcycles    331\n## 3 Planes         306\n```\n\nIt's just about readable but it's not great. \n\nAnother way to customise tables uses the function `kable()` from the `kableExtra` package.\n\nAmend your code to load the `kableExtra` package and apply the `kable()` function to the table. Once you've done this, knit the file again to see the output.\n\n\n::: {.cell layout-align=\"center\" filename='sales_data.Rmd'}\n\n```{.r .cell-code}\nlibrary(kableExtra) # for table display\n\nkable(sales_counts) # apply the kable function\n```\n\n::: {.cell-output-display}\n\n\n|PRODUCTLINE  |   n|\n|:------------|---:|\n|Classic Cars | 967|\n|Motorcycles  | 331|\n|Planes       | 306|\n\n\n:::\n:::\n\n\nIt's better, but it's still not amazing. So let's make a few adjustments. We can change the names of the columns, add a caption, and also change the alignment of the cell contents using arguments to `kable()`. \n\nWe can also add a theme to change the overall style. In this example we've used `kable_classic` but there are 5 others: `kable_paper`, `kable_classic_2`, `kable_minimal`, `kable_material` and `kable_material_dark`. Try them all and see which one you prefer.\n\nFinally, we can change the formatting of the first row using `row_spec`. Look up the help documentation for `row_spec` to see what other options are available. Try changing the value of  any of the arguments below to figure out what they do.\n\n\n::: {.cell layout-align=\"center\" filename='sales_data.Rmd'}\n\n```{.r .cell-code}\nk <- kable(sales_counts, \n      col.names = c(\"Product\", \"Sales\"),\n      caption = \"Number of sales per product line.\", \n      align = \"c\")\nk_style <- kable_classic(k, full_width = FALSE) \nk_highlighted <- row_spec(k_style, row = 0, bold = TRUE, color = \"red\") \n\nk_highlighted\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic\" style='font-family: \"Arial Narrow\", \"Source Sans Pro\", sans-serif; width: auto !important; margin-left: auto; margin-right: auto;'>\n<caption>Number of sales per product line.</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:center;font-weight: bold;color: red !important;\"> Product </th>\n   <th style=\"text-align:center;font-weight: bold;color: red !important;\"> Sales </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> Classic Cars </td>\n   <td style=\"text-align:center;\"> 967 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Motorcycles </td>\n   <td style=\"text-align:center;\"> 331 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Planes </td>\n   <td style=\"text-align:center;\"> 306 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n::: {.callout-note}\n## Caption placement\n\nThe appearance and placement of the table caption depends on the type of document you are creating. Your captions may look different to those in this book because you are creating a single-page `html_document`, while this book uses the `html` style from [quarto](https://quarto.org/), which is a newer alternative to R Markdown. You'll learn more about other document output types in @sec-custom-reports.\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Advanced table customisation\n\nIf you're feeling confident with what we have covered so far, the [kableExtra vignette](https://haozhu233.github.io/kableExtra/awesome_table_in_html.html){target=\"_blank\"} gives a lot more detail on how you can edit your tables using `kableExtra`. \n\nYou can also explore the [gt](https://gt.rstudio.com/){target=\"_blank\"} package, which is complex, but allows you to create beautiful customised tables. [Riding tables with {gt} and {gtExtras}](https://bjnnowak.netlify.app/2021/10/04/r-beautiful-tables-with-gt-and-gtextras/){target=\"_blank\"} is an outstanding tutorial.\n:::\n\n## Refining your report\n\n### Chunk defaults {#sec-rmd-setup}\n\nLet's finish by tidying up the report and organising our code a bit better. When you create a new R Markdown file in RStudio, a setup chunk is automatically created - we've mostly ignored this chunk until now.\n\n\n::: {.cell layout-align=\"center\" verbatim='r setup, include=FALSE'}\n<div class='verbatim'><pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;{r setup, include=FALSE}</code></pre>\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n<pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;</code></pre></div>\n:::\n\n\nYou can set more default options for your document here. Type the following code into the console to see the full list of options that you can set and their default values. However, the most useful and common options to change for the purposes of writing reports revolve around whether you want to show your code and the size of your images.\n\n\n::: {.cell layout-align=\"center\" filename='Run in the console'}\n\n```{.r .cell-code}\n# list option default values\nstr(knitr::opts_chunk$get())\n```\n:::\n\n\n\nReplace the code in your setup chunk with the below code and then try changing each option from `FALSE` to `TRUE` and changing the numeric values then knit the file again to see the difference it makes.\n\n\n::: {.cell layout-align=\"center\" verbatim='r setup, include=FALSE' filename='sales_data.Rmd'}\n<div class='verbatim'><pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;{r setup, include=FALSE}</code></pre>\n\n```{.r .cell-code}\nknitr::opts_chunk$set(\n  echo       = FALSE, # whether to show code chunks\n  message    = FALSE, # whether to show messages from your code\n  warning    = FALSE, # whether to show warnings from your code\n  fig.width  = 8,     # figure width in inches (at 96 dpi)\n  fig.height = 5,     # figure height in inches (at 96 dpi)\n  out.width = \"50%\"   # figures/images span 50% of the page width\n)\n```\n\n<pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;</code></pre></div>\n:::\n\n\n::: {.callout-warning collapse=\"true\"}\n## Figure versus output dimensions\n\nNote that `fig.width` and `fig.height` control the original size and aspect ratio of images generated by R, such as plots. This will affect the relative size of text and other elements in plots. It does not affect the size of existing images at all. However, `out.width` controls the **display** size of both existing images and figures generated by R. This is usually set as a percentage  of the page width.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![A plot with the default values of fig.width = 8, fig.height = 5, out.width = \"100%\"](02-reports_files/figure-html/fig-full-100-1.png){#fig-full-100 fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The same plot with half the default width and height: fig.width = 4, fig.height = 2.5, out.width = \"100%\"](02-reports_files/figure-html/fig-half-100-1.png){#fig-half-100 fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The same plot as above at half the output width: fig.width = 4, fig.height = 2.5, out.width = \"50%\"](02-reports_files/figure-html/fig-half-50-1.png){#fig-half-50 fig-align='center' width=50%}\n:::\n:::\n\n\n:::\n\n### Override defaults\n\nThese setup options change the behaviour for the entire document, however, you can override the behaviour for individual code chunks. \n\nFor example, by default you might want to hide your code but there also might be an occasion where you want to show the code you used to analyse your data. You can set `echo = FALSE` in your setup chunk to make hiding code the default but in the individual code chunk for your plot set `echo = TRUE`. Try this now and knit the file to see the results.\n\n\n::: {.cell layout-align=\"center\" verbatim='r, echo = TRUE' filename='sales_data.Rmd'}\n<div class='verbatim'><pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;{r, echo = TRUE}</code></pre>\n\n```{.r .cell-code}\nggplot(data = sales_counts, \n       mapping = aes(x = PRODUCTLINE, \n                     y = n, \n                     fill = PRODUCTLINE)) +\n  geom_col(show.legend = FALSE) +\n  labs(x = \"Type of vehicle\",\n       y = \"Number of sales\",\n       title = \"Sales by vehicle type\",\n       subtitle = \"2003 - 2005\")\n```\n\n<pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;</code></pre></div>\n:::\n\n\nAdditionally, you can also override the default image display size or dimensions.\n\n\n::: {.cell layout-align=\"center\" verbatim='r, out.width=\\'25%\\''}\n<div class='verbatim'><pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;{r, out.width='25%'}</code></pre>\n\n```{.r .cell-code}\nknitr::include_graphics(\"https://upload.wikimedia.org/wikipedia/commons/3/3f/P-51_Mustang_edit1.jpg\")\n```\n\n<pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;</code></pre></div>\n:::\n\n::: {.cell layout-align=\"center\" verbatim='r, fig.width = 10, fig.height = 20' filename='sales_data.Rmd'}\n<div class='verbatim'><pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;{r, fig.width = 10, fig.height = 20}</code></pre>\n\n```{.r .cell-code}\nggplot(data = sales_counts, \n       mapping = aes(x = PRODUCTLINE, y = n, fill = PRODUCTLINE)) +\n  geom_bar(stat = \"identity\", show.legend = FALSE) +\n  labs(x = \"Type of vehicle\",\n       y = \"Number of sales\",\n       title = \"Sales by vehicle type\",\n       subtitle = \"2003 - 2005\")\n```\n\n<pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;</code></pre></div>\n:::\n\n\n### Loading packages\n\nYou should add the packages you need in your setup chunk using `library()`. Often when you are working on a script, you will realize that you need to load another add-on package. Don't bury the call to `library(package_I_need)` way down in the script. Put it in the setup chunk so the user has an overview of what packages are needed.\n\n::: {.callout-note .try}\n## Move library calls to the setup chunk\nMove the code that loads the `tidyverse` and `kableExtra` to the setup chunk.\n:::\n\n### YAML header {#sec-yaml}\n\nFinally, the <a href='https://psyteachr.github.io/glossary/y#yaml' target='_blank' class='glossary' title='A structured format for information'>YAML</a> header is the bit at the very top of your Markdown document. You can set several options here as well. \n\n    ---\n    title: \"Sales Data Report\"\n    author: \"Your name\"\n    output:\n      html_document:\n        df_print: paged\n        theme: \n          version: 4\n          bootswatch: yeti\n        toc: true\n        toc_float:\n          collapsed: false\n          smooth_scroll: false\n        toc_depth: 3\n        number_sections: false\n    ---\n\n::: {.callout-note}\n## Try\n\nTry changing the values from `false` to `true` to see what the options do.\n:::\n\nThe `df_print: paged` option prints data frames using `rmarkdown::paged_table()` automatically. You can use `df_print: kable` to default to the simple kable style, but you will need the code from @sec-rmd-tables for more complex tables with kableExtra.\n\nThe built-in bootswatch themes are: default, cerulean, cosmo, darkly, flatly, journal, lumen, paper, readable, sandstone, simplex, spacelab, united, and yeti. You can [view and download more themes](https://bootswatch.com/4/). Try changing the theme to see which one you like best.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Light themes in versions 3 and 4.](images/reports/bootswatch.png){#fig-bootswatch fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.callout-warning}\n## YAML formatting\n\nYAML headers can be very picky about spaces and semicolons (the rest of R Markdown is much more forgiving). For example, if you put a space before \"author\", you will get an error that looks like:\n\n```\nError in yaml::yaml.load(..., eval.expr = TRUE) : \n  Parser error: while parsing a block mapping at line 1, \n  column 1 did not find expected key at line 2, column 2\n```\n\nThe error message will tell you exactly where the problem is (the second character of the second line of the YAML header), and it's usually a matter of fixing typos or making sure that the indenting is exactly right.\n:::\n\n### Table of Contents {#sec-toc}\n\nThe table of contents is created by setting `toc: true`. It will be displayed at the top of your document unless you set `toc_float: true` or include `toc_float:` with its options `collapsed` and `smooth_scroll` (options for a setting are indented under it). \n\n    ---\n    output:\n      html_document:\n        toc: true\n        toc_float:\n          collapsed: false\n          smooth_scroll: false\n        toc_depth: 3\n    ---\n\nThis will use the markdown header structure to create the table of contents. `toc_depth: 3` means that the table of contents will only display headers up to level 3 (i.e., those that start with three hashes: `###`). Add `{-}` after the header title to remove it from the table of contents (e.g., `### Overview {-}`).\n\n::: {.callout-caution}\n## Malformated ToC\n\nIf your table of contents isn't showing up correctly, this probably means that your headers are not set up right. Make sure that headers have no spaces before the hashes and at least one space after the hashes. For example, `##Analysis` won't display as a header and be added to the table of contents, but `## Analysis` will.\n:::\n\n### Formats\n\nSo far we've just knitted to html. To generate PDF reports, you need to install <pkg>tinytex</pkg> [@R-tinytex] and run the following code in the console (do **not** add this to your Rmd file):\n\n\n::: {.cell layout-align=\"center\" filname='Run in the console'}\n\n```{.r .cell-code}\ninstall.packages(\"tinytex\")\ntinytex::install_tinytex()\n```\n:::\n\n\nOnce you've done this, update your YAML heading to add a `pdf_document` section and knit a PDF document. The options for PDFs are more limited than for HTML documents, so if you just replace `html_document` with `pdf_document`, you may need to remove some options, such as `toc_float` if you get an error that looks like \"Functions that produce HTML output found in document targeting PDF output.\"\n\n    ---\n    output:\n      pdf_document:\n        toc: TRUE\n      html_document:\n        toc: TRUE\n        toc_float: TRUE\n    ---\n\nAs an alternative, you can also knit to a Word document. When you click the **`Knit`** button, the first format will knit by default, but you can use the drop-down menu under the Knit button to choose another format.\n\n    ---\n    output:\n      pdf_document:\n        toc: TRUE\n      html_document:\n        toc: TRUE\n        toc_float: TRUE\n      word_document:\n        toc: TRUE\n    ---\n    \n::: {.callout-warning}\n## Knitting errors\n\nIf you encounter errors, ask on Teams for help - knitting to PDF or Word can be tricky.\n:::\n\n### Summary {#sec-reports-summary}\n\nThis chapter has covered a lot but hopefully now you have a much better idea of what Markdown is able to do. Whilst working in Markdown takes longer in the initial set-up stage, once you have a fully reproducible report you can plug in new data each week or month and simply click knit, reducing duplication of effort, and the human error that comes with it.\n\nYou can access a [working R Markdown file](demos/sales_data.Rmd){download=\"important_info.Rmd\"} with the code from the example above to compare to your own code.\n\nAs you continue to work through the book you will learn how to wrangle and analyse your data and how to use Markdown to present it. We'll slowly build on the available customisation options so over the course of next few weeks, you'll find your Markdown reports start to look more polished and professional.\n\n## Exercises {#sec-exercises-reports}\n\nBelow are some additional exercises that will let you apply what you have learned in this chapter. We would suggest taking a break before you do these - it might feel slightly more effortful, but spreading out your practice will help you learn more in the long run.\n\n### New project {#sec-exercises-reports-project}\n\nCreate a new project called \"demo_report\" ([@sec-projects]).\n\n### New script {#sec-exercises-reports-setup}\n\nIn the \"demo_report\" project, create a new Rmarkdown document called \"job.Rmd\" ([@sec-rmarkdown]). Edit the YAML header to output tables using kable and set a custom theme ([@sec-yaml]).\n\n\n<div class='webex-solution'><button>Solution</button>\n\n    ---\n    title: \"My Job\"\n    author: \"Me\"\n    output:\n      html_document:\n        df_print: kable\n        theme: \n          version: 4\n          bootswatch: sandstone\n    ---\n\n</div>\n\n\n### R Markdown {#sec-exercises-reports-rmarkdown}\n\nWrite a short paragraph describing your job or a job you might like to have in the future ([@sec-markdown]). Include a bullet-point list of links to websites that are useful for that job ([@sec-markdown]).\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\n```\nI am a research psychologist who is interested in open science \nand teaching computational skills.\n\n* [psyTeachR books](https://psyteachr.github.io/)\n* [Google Scholar](https://scholar.google.com/)\n```\n\n\n</div>\n\n\n\n### Tables {#sec-exercises-reports-tables}\n\nUse the following code to load a small table of tasks ([@sec-code-chunks]). Edit it to be relevant to your job (you can change the categories entirely if you want).  \n\n\n::: {.cell layout-align=\"center\" filename='job.Rmd'}\n\n```{.r .cell-code}\ntasks <- tibble::tribble(\n  ~task,                   ~category,      ~frequency,\n  \"Respond to tweets\",     \"social media\", \"daily\",\n  \"Create a twitter poll\", \"social media\", \"weekly\",\n  \"Make the sales report\", \"reporting\",    \"montly\"\n)\n```\n:::\n\n\nFigure out how to make it so that code chunks don't show in your knitted document ([@sec-rmd-setup]).\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\nYou can set the default to `echo = FALSE` in the setup chunk at the top of the script.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = FALSE)\n```\n:::\n\n\nTo set visibility for a specific code chunk, put `echo = FALSE` inside the curly brackets.\n\n\n::: {.cell layout-align=\"center\" verbatim='r, echo=FALSE'}\n<div class='verbatim'><pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;{r, echo=FALSE}</code></pre>\n\n```{.r .cell-code}\n# code to hide\n```\n\n<pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;</code></pre></div>\n:::\n\n\n\n</div>\n\n\nDisplay the table with purple italic column headers. Try different styles using <pkg>kableExtra</pkg> ([@sec-rmd-tables]).\n\n\n::: {.cell layout-align=\"center\" webex.hide='true'}\n::: {.callout-note collapse='true'}\n## Solution\n\n```{.r .cell-code}\nk <- kableExtra::kable(tasks)\nk_style <- kableExtra::kable_minimal(k)\nk_highlight <- kableExtra::row_spec(k_style,\n                                    row = 0, \n                                    italic = TRUE, \n                                    color = \"purple\")\nk_highlight\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-minimal\" style='font-family: \"Trebuchet MS\", verdana, sans-serif; margin-left: auto; margin-right: auto;'>\n <thead>\n  <tr>\n   <th style=\"text-align:left;font-style: italic;color: purple !important;\"> task </th>\n   <th style=\"text-align:left;font-style: italic;color: purple !important;\"> category </th>\n   <th style=\"text-align:left;font-style: italic;color: purple !important;\"> frequency </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Respond to tweets </td>\n   <td style=\"text-align:left;\"> social media </td>\n   <td style=\"text-align:left;\"> daily </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Create a twitter poll </td>\n   <td style=\"text-align:left;\"> social media </td>\n   <td style=\"text-align:left;\"> weekly </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Make the sales report </td>\n   <td style=\"text-align:left;\"> reporting </td>\n   <td style=\"text-align:left;\"> montly </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n\n:::\n:::\n\n\n### Images {#sec-exercises-reports-images}\n\nAdd an image of anything relevant ([@sec-rmd-images]).\n\n\n::: {.cell layout-align=\"center\" webex.hide='true'}\n::: {.callout-note collapse='true'}\n## Solution\n\n```{.r .cell-code}\nknitr::include_graphics(\"https://psyteachr.github.io/ads-v2/images/logos/logo.png\")\n```\n\n::: {.cell-output-display}\n![](https://psyteachr.github.io/ads-v2/images/logos/logo.png){fig-align='center' width=100%}\n:::\n\n:::\n:::\n\n\n\n\n<div class='webex-solution'><button>Alternative Solution</button>\n\n\nYou can add an image from the web using its URL:\n\n```\n![Applied Data Skills](https://psyteachr.github.io/ads-v2/images/logos/logo.png)\n```\n    \nOr save an image into your project directory (e.g., in the images folder) and add it using the relative path:\n\n```\n![Applied Data Skills](images/logos/logo.png)\n```\n    \n\n</div>\n\n\n### Inline R {#sec-exercises-reports-inline}\n\nUse inline R to include the version of R you are using in the following sentence: \"This report was created using R version 4.4.0 (2024-04-24).\" You can get the version using the object `R.version.string` ([@sec-rmd-inline-r]).\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\nThis report was created using `` R version 4.4.0 (2024-04-24) ``.\n\n\n</div>\n\n\n### Knit {#sec-exercises-reports-knit}\n\nKnit this document to html ([@sec-rmd-knit]).\n\n\n<div class='webex-solution'><button>Solution</button>\n\nClick on the knit button or run the following code in the console. (Do not put it the Rmd script!)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrmarkdown::render(\"job.Rmd\")\n```\n:::\n\n\n\n</div>\n\n\n### Share on Teams\n\nOnce you're done, share your knitted html file and the Rmd file for the exercises on Teams in the Week 02 channel.\n\n## Glossary {#sec-glossary-reports}\n\n\n::: {.cell layout-align=\"center\"}\n\n|term                                                |definition                                                                                                                                                       |\n|:---------------------------------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|[directory](https://psyteachr.github.io/glossary/d#directory){target='_blank' class='glossary'}|A collection or \"folder\" of files on a computer.                                                                                                                 |\n|[extension](https://psyteachr.github.io/glossary/e#extension){target='_blank' class='glossary'}|The end part of a file name that tells you what type of file it is (e.g., .R or .Rmd).                                                                           |\n|[knit](https://psyteachr.github.io/glossary/k#knit){target='_blank' class='glossary'}|To create an HTML, PDF, or Word document from an R Markdown (Rmd) document                                                                                       |\n|[markdown](https://psyteachr.github.io/glossary/m#markdown){target='_blank' class='glossary'}|A way to specify formatting, such as headers, paragraphs, lists, bolding, and links.                                                                             |\n|[project](https://psyteachr.github.io/glossary/p#project){target='_blank' class='glossary'}|A way to organise related files in RStudio                                                                                                                       |\n|[r-markdown](https://psyteachr.github.io/glossary/r#r-markdown){target='_blank' class='glossary'}|The R-specific version of markdown: a way to specify formatting, such as headers, paragraphs, lists, bolding, and links, as well as code blocks and inline code. |\n|[script](https://psyteachr.github.io/glossary/s#script){target='_blank' class='glossary'}|A plain-text file that contains commands in a coding language, such as R.                                                                                        |\n|[working-directory](https://psyteachr.github.io/glossary/w#working-directory){target='_blank' class='glossary'}|The filepath where R is currently reading and writing files.                                                                                                     |\n|[yaml](https://psyteachr.github.io/glossary/y#yaml){target='_blank' class='glossary'}|A structured format for information                                                                                                                              |\n:::\n\n\n## Further Resources {#sec-resources-reports}\n\n-   [R Markdown Cheat Sheet](https://www.rstudio.org/links/r_markdown_cheat_sheet)\n<!--\n-   [R Markdown reference Guide](https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf)\n-->\n-   [R Markdown Tutorial](https://rmarkdown.rstudio.com/lesson-1.html)\n-   [R Markdown: The Definitive Guide](https://bookdown.org/yihui/rmarkdown/) by Yihui Xie, J. J. Allaire, & Garrett Grolemund\n-   [Project Structure](https://slides.djnavarro.net/project-structure/) by Danielle Navarro\n-   [How to name files](https://speakerdeck.com/jennybc/how-to-name-files) by Jenny Bryan\n-   [kableExtra](https://haozhu233.github.io/kableExtra/awesome_table_in_html.html)\n-   [gt](https://gt.rstudio.com/)\n\n\n\n",
    "supporting": [
      "02-reports_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}