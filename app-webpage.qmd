# Webpages {#sec-webpages}

In this tutorial, you will learn how to create a simple webpage using `r glossary("quarto")`, link multiple pages, and style your content using `r glossary("css")`.

## Create a webpage {#sec-webpage-create}

### Create a project 

1. Choose `New Project...` from the `File` menu (don't save any workspaces)
2. Choose `New Directory` > `Quarto Website` 
3. Set your project name to "mywebpage"

### Render the site

In the upper right "Build" pane, click on the "Build website" hammer icon. This will render the website and automatically open it in a browser window. Alternatively, type the following into the Console pane:

```{r}
#| eval: false
quarto::quarto_render()
```

If you accidentally close the website and want to look at it again, you don't have to re-render it. Click on the `docs` directory in the `Files` tab of the lower right pane, then click on `index.html` and choose <if>View in Web Browser</if>.

### Site header

This is where you can set options like whether to show a table of contents and what the navigation bar will look like.

1. Open the file `_quarto.yml`
2. Replace the text with the following:

    ```
    project:
      type: website
      output_dir: docs
    
    website:
      title: "mywebsite"
      author: "YOUR NAME" 
      navbar:
        left:
          - href: index.qmd
            text: Home
          - about.qmd
    
    format:
      html:
        theme:
          light: flatly
          dark: darkly
        css: styles.css
        toc: true
    ```
    
3. Save the file (do not change the name)
4. Re-render the site

### Edit the pages

Edit the text in the `index.qmd` and `about.qmd` pages. You can use R markdown, including code chunks.

The project should open with the `index.qmd` file already open, and the following contents:

````
---
title: "mywebsite"
---

This is a Quarto website.

To learn more about Quarto websites visit <https://quarto.org/docs/websites>.

```{r}
1 + 1
```

````


1. Delete everything and just type an opening paragraph about you.
2. Re-render the site

::: {.callout-note}
I usually skip the title on the index page of a website (the default page that shows when you type the base `r glossary("url")`. For other pages, you can add the title (and any other quarto header info that is different from the main site _quarto.yml) inside the YAML header markings (three dashes). Alternatively, you can use a level-1 header at the top to indicate the page title (e.g., `# Page Title`).
:::

## Add pages {#sec-webpage-pages}

1. Create a new .qmd file for each webpage
2. Add content to the webpages using R Markdown
3. Re-render the site

If you include linked content like image files, make sure they are copied to your main project directory and linked using `r glossary("relative path", "relative paths")`.

To get your website online, copy the contents of the `docs` directory to a web server. If you don't have access to a web server, you can make free websites using a GitHub repository and [GitHub Pages](https://pages.github.com/)).


## Styles {#sec-webpage-styles}

You can change the appearance of your website by changing the theme in the `_quarto.yml` file (see @sec-plotstyle), but the instructions below will help you to customise things even further.


### Add custom styles

A custom style sheet is a document that determines how each element of your website should look. The default website already created one for you called `styles.css` and referenced in to the _quarto.yml file. If you're creating a website from scratch, you can make a plain text file and link it by adding `css: styles.css` under `format: html` in the _quarto.yml file like this:

``` yaml
format:
  html:
    css: styles.css
```


Then you need to add your custom styles in this file The web has thousands of guides to CSS, but [codeacademy](https://www.codecademy.com/en/tracks/htmlcss) has great interactive tutorials for learning html, css, and even more advanced web coding like javascript.

However, the basics of css are easy to learn and it's best to just start playing around with it. Add the following text to your `style.css` file and re-render the website.

### Change global fonts and colours

``` css
body {
  font-size: 2em;
  font-family: "Times New Roman";
  color: white;
  background-color: #660000;
}
```

<style>
  #body-example * {
    font-size: 2em;
    font-family: "Times New Roman";
    color: white;
    background-color: #660000;
  }
</style>

<div id="body-example">

This will make the text on your website larger, a different font, and change the text and background colours.

</div>

The theme you're using might have css that blocks the styles you're trying to change. You can add `!important` before the end colon to override that.
    
### Change certain elements

Maybe you only want to change the font colour for your headings, not the rest of the text. You can apply a style to a specific *element* type by specifying the element name before the curly brackets. 

``` css
h1, h2, h3 {
  text-align: center;
  color: hsl(0, 100%, 20%);
}

h3 {
  font-style: italic;
}

p {
  border: 1px solid green;
  padding: 10px;
  line-height: 2;
}

ul {
  border: 3px dotted red;
  border-radius: 10px;
  padding: 10px 30px;
}
```

<style>
  #h-example h2, 
  #h-example h3, 
  #h-example h4 {
    text-align: center;
    color: hsl(0, 100%, 20%);
  }
  
  #h-example h4 {
    font-style: italic;
  }
  
  #h-example p {
    border: 1px solid green;
    padding: 10px;
    line-height: 2;
  }
  
  #h-example ul {
    border: 3px dotted red;
    border-radius: 10px;
    padding: 10px 30px;
  }
</style>

<div id="h-example">

## Example using the styles above

The CSS above changes the styles for three levels of headers (`h2`, `h3`, `h4`) and sets the third level to italics.

### Level 3 header

It also gives paragraphs (`p`) a green border and double-spacing.

#### Level 4 header

Unordered Lists (`ul`) get:

* dotted red border
* round corners
* increased padding on top (`10px`) and sides (`30px`)

</div>

