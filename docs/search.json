[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Applied Data Skills",
    "section": "",
    "text": "Overview\nThis book provides an overview of the basic skills needed to turn raw data into informative summaries and visualisations presented in professional reports and presentations. The book will introduce learners to R (R Core Team, 2022), a programming language that can help automate working with data. The book will cover importing and processing data from spreadsheets, producing data summaries of descriptive statistics in tables, creating beautiful and informative visualisations, and constructing reports and presentations that automatically update when the underlying data changes.\nBy the end of this book, you will be able to use R to:",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#structure-of-the-course",
    "href": "index.html#structure-of-the-course",
    "title": "Applied Data Skills",
    "section": "Structure of the course",
    "text": "Structure of the course\nThis book accompanies a 10-week course, covering one chapter per week. Each chapter will introduce you to some new skills and concepts using concrete examples. At various points, there will be multiple-choice or fill-in-the-blank questions for you to check your understanding. Each chapter has accompanying walk-through videos, where an instructor demonstrates the skills covered in the chapter. Each chapter also has accompanying exercises that you should do to reinforce your learning.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#how-to-learn-data-skills",
    "href": "index.html#how-to-learn-data-skills",
    "title": "Applied Data Skills",
    "section": "How to learn data skills",
    "text": "How to learn data skills\n\n\n\nLearning data skills is kind of like having a gym membership - you’ll be given state-of-the-art equipment to use and instructions for how to use them, but your data skills won’t get any stronger unless you practice.\n\n\n\nData skills do not require you to memorise lots of code. You will be introduced to many different functions, but the main skill to learn is how to efficiently find the information you need. This will require getting used to the structure of help files and cheat sheets, learning how to Goggle your problem and choose a helpful solution, and learning how to read error messages.\n\n\n\nLearning to code involves making a lot of mistakes. These mistakes are completely essential to the process, so try not to feel too frustrated. Many of the chapter exercises will give you broken code to fix so you get experience seeing what common errors look like. As you become a more experienced coder, you might not make fewer errors, but you’ll recover from them much faster.\n\n\n\n\nR Core Team. (2022). R: A language and environment for statistical computing. R Foundation for Statistical Computing. https://www.R-project.org/",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "01-intro.html",
    "href": "01-intro.html",
    "title": "1  Intro to R and RStudio",
    "section": "",
    "text": "Intended Learning Outcomes",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R and RStudio</span>"
    ]
  },
  {
    "objectID": "01-intro.html#sec-ilo-intro",
    "href": "01-intro.html#sec-ilo-intro",
    "title": "1  Intro to R and RStudio",
    "section": "",
    "text": "Install R and RStudio\nBe able to install add-on packages\nBe able to get help for packages and functions\nBe able to create objects by writing and running code in the console",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R and RStudio</span>"
    ]
  },
  {
    "objectID": "01-intro.html#functions-ch01",
    "href": "01-intro.html#functions-ch01",
    "title": "1  Intro to R and RStudio",
    "section": "\n1.1 Functions used",
    "text": "1.1 Functions used\n\n\n.rs.restartR(), ?, Sys.Date(), as.Date(), beep(), devtools::install_github(), install.packages(), library(), paste(), sample(), vignette().",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R and RStudio</span>"
    ]
  },
  {
    "objectID": "01-intro.html#sec-walkthrough-intro",
    "href": "01-intro.html#sec-walkthrough-intro",
    "title": "1  Intro to R and RStudio",
    "section": "Walkthrough video",
    "text": "Walkthrough video\nThere is a walkthrough video of this chapter available via Echo360. We recommend first trying to work through each section of the book on your own and then watching the video if you get stuck, or if you would like more information. This will feel slower than just starting with the video, but you will learn more in the long-run. Please note that there may have been minor edits to the book since the video was recorded. Where there are differences, the book should always take precedence.\nDownload the RStudio IDE Cheatsheet",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R and RStudio</span>"
    ]
  },
  {
    "objectID": "01-intro.html#sec-intro-installing-r",
    "href": "01-intro.html#sec-intro-installing-r",
    "title": "1  Intro to R and RStudio",
    "section": "\n1.2 Installing R and RStudio",
    "text": "1.2 Installing R and RStudio\nR is a programming language that you will write code in and RStudio is a program that makes working in R easier.\n?sec-installing-r has technical details on installing R and RStudio on your computer. If you need any help installing R, please ask on Teams or attend office hours. Once you have installed R and RStudio, come back to this chapter. If you already had R and/or RStudio installed, we recommend updating to the latest version before you work through this course. ?sec-updating-r has more details on how to do that. Here, we’ll concentrate on introducing you to RStudio’s interface and getting it configured.\n\n\n\n\n\n\nBook version\n\n\n\nThis book was created using R version 4.3.1 (2023-06-16 ucrt) (Beagle Scouts) and RStudio version 2022.12.0.353 (Elsbeth Geranium). Most of the content of this book will work fine in versions of R above 4.0 and earlier versions of RStudio, although there may be some small differences in the interface.\n\n\n\n\n1.2.1 RStudio\nWhen you installed R, that gave your computer the ability to process the R programming language, and also installed an app called “R”. We will never use that app. Instead, we will use RStudio.\nRStudio is an Integrated Development Environment (IDE). Think of it as knowing English and using a plain text editor like NotePad to write a book versus using a word processor like Microsoft Word. You could do it, but it would be much harder without things like spell-checking and formatting and you wouldn’t be able to use some of the advanced features that Word has developed. In a similar way, you can use R without R Studio but we wouldn’t recommend it. RStudio serves as a text editor, file manager, spreadsheet viewer, and more. The key thing to remember is that although you will do all of your work using RStudio for this course, you are actually using two pieces of software, which means that from time to time, both of them may have separate updates.\nRStudio is arranged with four window panes.\n\n\n\n\n\n\n\nFigure 1.1: The RStudio IDE\n\n\n\n\nBy default, the upper left pane is the source pane, where you view, write, and edit code from files and view data tables in a spreadsheet format. When you first open RStudio, this pane won’t display until we open a document or load in some data – don’t worry, we’ll get to that soon.\nThe lower left pane is the console pane, where you can type in commands and view output messages. You can write code in the console to test it out. The code will run and can create objects in the environment, but the code itself won’t be saved. You need to write your code into a script in the source pane to save it, which we’ll cover in Chapter 2.\nThe right panes have several different tabs that show you information about your code. The most used tabs in the upper right pane are the Environment tab and the Help tab. The Environment tab lists some information about the objects that you have defined in your code. We’ll learn more about the Help tab in Section 1.4.5.\nIn the lower right pane, the most used tabs are the Files tab for directory structure, the Plots tab for plots made in a script, the Packages tab for managing add-on packages (see Section 1.4), and the Viewer tab to display reports created by your scripts. You can change the location of panes and what tabs are shown under Tools &gt; Global Options… &gt; Pane Layout.\n\n1.2.2 Reproducibility\nIn this class, you will be learning how to make reproducible reports. This involves writing scripts that transform data, create summaries and visualisations, and embed them in a report in a way that always gives you the same results.\nWhen you do things reproducibly, others (and future you) can understand and check your work. You can also reuse your work more easily. For example, if you need to create a report every month with the social media analytics for your company, a reproducible report allows you to download a new month’s data and create the report within seconds. It might take a little longer to set up the report in the first instance with reproducible methods, but the time it saves you in the long run is invaluable.\n\n\n\n\n\n\nSettings for Reproducibility\n\n\n\n?sec-rstudio-settings shows you how to change two important settings in the Global Options to increase reproducibility. Your settings should have:\n\nRestore .RData into workspace at startup: \nChecked\nNot Checked\n\nSave workspace to .RData on exit: \nAlways\nNever\nAsk\n\n\n\n\n\n1.2.3 Themes and accessiblilty\nYou can customise how R Studio looks to make it work for you. Click Tools &gt; Global Options &gt; Appearance. You can change the default font, font size, and general appearance of R Studio, including using dark mode. Play around with the settings and see what you prefer - you’re going to spend a lot of time with R, it might as well look nice!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R and RStudio</span>"
    ]
  },
  {
    "objectID": "01-intro.html#sec-intro-sessions",
    "href": "01-intro.html#sec-intro-sessions",
    "title": "1  Intro to R and RStudio",
    "section": "\n1.3 Sessions",
    "text": "1.3 Sessions\nIf you have the above settings configured correctly, when you open up RStudio and start writing code, loading packages, and creating objects, you will be doing so in a new session and your Environment tab should be completely empty. If you find that your code isn’t working and you can’t figure out why, it might be worth restarting your R session. This will clear the environment and detach all loaded packages - think of it like restarting your phone. There are several ways that you can restart R:\n\nMenu: Session &gt; Restart R\n\n\nCmd-Shift-F10 or Ctl-Shift-F10\n\ntype .rs.restartR() in the console\n\nTry doing each of these now. Additionally, now would be a good time to create a notebook where you can keep a record of useful hints and tips and things to try when your code isn’t working. Add “restart R session” to this notebook as your first item.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R and RStudio</span>"
    ]
  },
  {
    "objectID": "01-intro.html#sec-packages",
    "href": "01-intro.html#sec-packages",
    "title": "1  Intro to R and RStudio",
    "section": "\n1.4 Packages and functions",
    "text": "1.4 Packages and functions\nWhen you install R you will have access to a range of functions including options for data wrangling and statistical analysis. The functions that are included in the default installation are typically referred to as base R and you can think of them like the default apps that come pre-loaded on your phone.\nOne of the great things about R, however, is that it is user extensible: anyone can create a new add-on that extends its functionality. There are currently thousands of packages that R users have created to solve many different kinds of problems, or just simply to have fun. For example, there are packages for data visualisation, machine learning, interactive dashboards, web scraping, and playing games such as Sudoku.\nAdd-on packages are not distributed with base R, but have to be downloaded and installed from an archive, in the same way that you would, for instance, download and install PokemonGo on your smartphone. The main repository where packages reside is called CRAN, the Comprehensive R Archive Network.\nThere is an important distinction between installing a package and loading a package.\n\n1.4.1 Installing a package\n\nThis is done using install.packages(). This is like installing an app on your phone: you only have to do it once and the app will remain installed until you remove it. For instance, if you want to use PokemonGo on your phone, you install it once from the App Store or Play Store; you don’t have to re-install it each time you want to use it. Once you launch the app, it will run in the background until you close it or restart your phone. Likewise, when you install a package, the package will be available (but not loaded) every time you open up R.\nInstall the tidyverse package on your system. This is the main package we will use throughout this book for data wrangling, summaries, and visualisation. It is actually a bundle of packages, which we’ll explain further in Section 1.4.4.\n\n\n\nRun in the console\n\ninstall.packages(\"tidyverse\")\n\n\nIf you get a message that says something like package ‘tidyverse’ successfully unpacked and MD5 sums checked, the installation was successful. If you get an error and the package wasn’t installed, check the troubleshooting section of ?sec-package-install-troubleshooting.\n\n\n\n\n\n\nInstall packages from the console only\n\n\n\nNever install a package from inside a script. Only do this from the console pane or the packages tab of the lower right pane.\n\n\nHere are some other packages you’ll want to install for the first two chapters.\n\n\n\nRun in the console\n\ninstall.packages(\"beepr\") # for beeps\ninstall.packages(\"rmarkdown\") # for creating R markdown files\ninstall.packages(\"devtools\")  # for installing packages from github\n\n\nOnce you’ve installed the devtools package, you can also install packages from repositories other than CRAN, such as github. The following code installs the development version of a package for making waffle plots.\n\n\n\nRun in the console\n\n# install waffle package \ndevtools::install_github(\"hrbrmstr/waffle\")\n\n\n\n1.4.2 Loading a package\nThis is done using the library() function. This is like launching an app on your phone: the functionality is only there where the app is launched and remains there until you close the app or restart. For example, when you run library(devtools) within a session, the functions in the package referred to by devtools will be made available for your R session. The next time you start R, you will need to run library(devtools) again if you want to access that package.\nAfter installing the beepr package, you can load it for your current R session as follows:\n\n\n\nRun in the console\n\nlibrary(beepr)\n\n\nYou might get some red text when you load a package, this is normal. It is usually warning you that this package has functions that have the same name as other packages you’ve already loaded.\n\n\n\n\n\n\nNote\n\n\n\nYou can use the convention package::function() to indicate in which add-on package a function resides. For instance, if you see readr::read_csv(), that refers to the function read_csv() in the {readr} add-on package. If the package is loaded using library(), you don’t have to specify the package name before a function unless there is a conflict (e.g., you have two packages loaded that have a function with the same name).\n\n\n\n1.4.3 Using a function\nNow you can run the function beep().\n\n\n\nRun in the console\n\nbeep()\n\n\nA function is a name that refers to some code you can reuse. We’ll start by using functions that are provided for you in packages, but you can also write your own functions. After the function name, there is a pair of parentheses, which contain zero or more arguments. These are options that you can set. In the example above, the sound argument has a default value of 1, which makes a “ping” sound. Try changing the argument to an integer between 1 and 11.\n\n\n\nRun in the console\n\nbeep(sound = 8)\n\n\nIf you type a function into the console pane, it will run as soon as you hit enter. If you put the function in a script or R Markdown document in the source pane, it won’t run until you run the script, knit the R Markdown file, or run a code chunk. You’ll learn more about this in Chapter 2.\n\n1.4.4 Tidyverse\ntidyverse is a meta-package that loads several packages we’ll be using in almost every chapter in this book:\n\n\nggplot2, for data visualisation (Chapter 3)\n\nreadr, for data import (?sec-data)\n\ntibble, for tables (?sec-data)\n\ntidyr, for data tidying (?sec-tidy)\n\ndplyr, for data manipulation (?sec-wrangle)\n\nstringr, for strings\n\n\nforcats, for factors\n\n\npurrr, for repeating things\n\nWhen you install tidyverse, it also installs some other useful packages that you can load individually. You can get the full list using tidyverse_packages(), but the packages we’ll be using in this book are:\n\n\ngooglesheets4, for working with Google spreadsheets\n\nreadxl, for Excel files\n\nlubridate, for working with dates\n\nhms, for working with times\n\nrvest, for web scraping\n\n1.4.5 Function Help\nWhen you load the tidyverse it automatically loads all of the above packages, however, it can be helpful to know which package a function comes from if you need to Google it. If a function is in base R or a loaded package, you can type ?function_name in the console to access the help file. At the top of the help it will give you the function and package name.\nIf the package isn’t loaded, use ?package_name::function_name or specify the package in the help() function. When you aren’t sure what package the function is in, use the shortcut ??function_name.\n\n\n\nRun in the console\n\n# if the package is loaded\n?beepr\nhelp(\"beepr\")\n\n# works whether or not the package is loaded\n?beepr::beep\nhelp(\"beep\", package=\"beepr\") \n\n# shows a list of potentially matching functions\n??beep\n\n\n\n\n\nFunction help is always organised in the same way. For example, look at the help for ?beepr::beep. At the top, it tells you the name of the function and its package in curly brackets, then a short description of the function, followed by a longer description. The Usage section shows the function with all of its arguments. If any of those arguments have default values, they will be shown like function(arg = default). The Arguments section lists each argument with an explanation. There may be a Details section after this with even more detail about the functions. The Examples section is last, and shows examples that you can run in your console window to see how the function works.\n\n\n\n\n\n\nFunction Help\n\n\n\n\nWhat is the first argument to the mean function? \ntrim\nna.rm\nmean\nx\n\nWhat package is read_excel in? \nreadr\nreadxl\nbase\nstats\n\n\n\n\n\n1.4.6 Arguments\nYou can look up the arguments/options that a function has by using the help documentation. Some arguments are required, and some are optional. Optional arguments will often use a default (normally specified in the help documentation) if you do not enter any value.\nAs an example, look at the help documentation for the function sample() which randomly samples items from a list.\n\n\n\nRun in the console\n\n?sample\n\n\nThe help documentation for sample() should appear in the bottom right help panel. In the usage section, we see that sample() takes the following form:\n\nsample(x, size, replace = FALSE, prob = NULL)\n\nIn the arguments section, there are explanations for each of the arguments. x is the list of items we want to choose from, size is the number of items we want to choose, replace is whether or not each item may be selected more than once, and prob gives the probability that each item is chosen. In the details section it notes that if no values are entered for replace or prob it will use defaults of FALSE (each item can only be chosen once) and NULL (all items will have equal probability of being chosen). Because there is no default value for x or size, they must be specified otherwise the code won’t run.\nLet’s try an example and just change the required arguments to x and size to ask R to choose 5 random letters (letters is a built-in vector of the 26 lower-case Latin letters).\n\nsample(x = letters, size = 5)\n\n[1] \"z\" \"v\" \"y\" \"w\" \"j\"\n\n\n\n\n\n\n\n\nWhy are my letters different to your letters?\n\n\n\n\n\nsample() generates a random sample. Each time you run the code, you’ll generate a different set of random letters (try it). The function set.seed() controls the random number generator - if you’re using any functions that use randomness (such as sample()), running set.seed() will ensure that you get the same result (in many cases this may not be what you want to do). To get the same numbers we do, run set.seed(1242016) in the console, and then run sample(x = letters, size = 5) again.\n\n\n\nNow we can change the default value for the replace argument to produce a set of letters that is allowed to have duplicates.\n\nset.seed(8675309)\nsample(x = letters, size = 5, replace = TRUE)\n\n[1] \"t\" \"k\" \"j\" \"k\" \"m\"\n\n\nThis time R has still produced 5 random letters, but now this set of letters has two instances of “k”. Always remember to use the help documentation to help you understand what arguments a function requires.\n\n1.4.7 Argument names\nIn the above examples, we have written out the argument names in our code (i.e., x, size, replace), however, this is not strictly necessary. The following two lines of code would both produce the same result (although each time you run sample() it will produce a slightly different result, because it’s random, but they would still work the same):\n\nsample(x = letters, size = 5, replace = TRUE)\nsample(letters, 5, TRUE)\n\nImportantly, if you do not write out the argument names, R will use the default order of arguments. That is, for sample it will assume that the first value you enter is x, the second value is size and the third value is replace.\nIf you write out the argument names, then you can write the arguments in whatever order you like:\n\nsample(size = 5, replace = TRUE, x = letters)\n\nWhen you are first learning R, you may find it useful to write out the argument names as it can help you remember and understand what each part of the function is doing. However, as your skills progress you may find it quicker to omit the argument names and you will also see code examples online that do not use argument names, so it is important to be able to understand which argument each bit of code is referring to (or look up the help documentation to check).\nIn this course, we will always write out the argument names the first time we use each function. However, in subsequent uses they may be omitted.\n\n1.4.8 Tab auto-complete\nOne very useful feature of R Studio is tab auto-complete for functions. If you write the name of the function and then press the tab key, R Studio will show you the arguments that function takes along with a brief description. If you press enter on the argument name it will fill in the name for you, just like auto-complete on your phone. This is incredibly useful when you are first learning R and you should remember to use this feature frequently.\n\n\n\n\n\n\n\nFigure 1.2: Tab auto-complete",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R and RStudio</span>"
    ]
  },
  {
    "objectID": "01-intro.html#sec-objects",
    "href": "01-intro.html#sec-objects",
    "title": "1  Intro to R and RStudio",
    "section": "\n1.5 Objects",
    "text": "1.5 Objects\nA large part of your coding will involve creating and manipulating objects. Objects contain stuff. That stuff can be numbers, words, or the result of operations and analyses. You assign content to an object using &lt;-.\nRun the following code in the console, but change the values of name and age to your own details and change christmas to a holiday or date you care about.\n\n\n\nRun in the console\n\nname &lt;- \"Emily\"\nage &lt;- 36\ntoday &lt;- Sys.Date()\nchristmas &lt;- as.Date(\"2024-12-25\")\n\n\nYou’ll see that four objects now appear in the environment pane:\n\n\nname is character (text) data. In order for R to recognise it as text, it must be enclosed in double quotation marks \" \".\n\nage is numeric data. In order for R to recognise this as a number, it must not be enclosed in quotation marks.\n\ntoday stores the result of the function Sys.Date(). This function returns your computer system’s date. Unlike name and age, which are hard-coded (i.e., they will always return the values you enter), the contents of the object today will change dynamically with the date. That is, if you run that function tomorrow, it will update the date to tomorrow’s date.\n\nchristmas is also a date but it’s hard-coded as a specific date. It’s wrapped within the as.Date() function that tells R to interpret the character string you provide as a date rather than text.\n\n\n\n\n\n\n\nNote\n\n\n\nTo print the contents of an object, type the object’s name in the console and press enter. Try printing all four objects now.\n\n\nFinally, a key concept to understand is that objects can interact and you can save the results of those interactions in new object. Edit and run the following code to create these new objects, and then print the contents of each new object.\n\n\n\nRun in the console\n\ndecade &lt;- age + 10\nfull_name &lt;- paste(name, \"Nordmann\")\nhow_long &lt;- christmas - today",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R and RStudio</span>"
    ]
  },
  {
    "objectID": "01-intro.html#sec-help",
    "href": "01-intro.html#sec-help",
    "title": "1  Intro to R and RStudio",
    "section": "\n1.6 Getting help",
    "text": "1.6 Getting help\nYou will feel like you need a lot of help when you’re starting to learn. This won’t really go away; it’s impossible to memorise everything. The goal is to learn enough about the structure of R that you can look things up quickly. This is why we’ll introduce specialised jargon in the glossary for each chapter; it’s easier to google “convert character to numeric in R” than “make numbers in quotes be actual numbers not words”. In addition to the function help described above, here’s some additional resources you should use often.\n\n1.6.1 Package reference manuals\nStart up help in a browser by entering help.start() in the console. Click on Packages under Reference to see a list of packages. Scroll down to the readxl package and click on it to see a list of the functions that are available in that package.\n\n1.6.2 Googling\nIf the function help doesn’t help, or you’re not even sure what function you need, try Googling your question. It will take some practice to be able to use the right jargon in your search terms to get what you want. It helps to put “R” or “tidyverse” in the search text, or the name of the relevant package, like “ggplot2”.\n\n1.6.3 Vignettes\nMany packages, especially tidyverse ones, have helpful websites with vignettes explaining how to use their functions. Some of the vignettes are also available inside R. You can access them from a package’s help page or with the vignette() function.\n\n\n\nRun in the console\n\n# opens a list of available vignettes\nvignette(package = \"ggplot2\")\n\n# opens a specific vignette in the Help pane\nvignette(\"ggplot2-specs\", package = \"ggplot2\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R and RStudio</span>"
    ]
  },
  {
    "objectID": "01-intro.html#sec-glossary-intro",
    "href": "01-intro.html#sec-glossary-intro",
    "title": "1  Intro to R and RStudio",
    "section": "\n1.7 Glossary",
    "text": "1.7 Glossary\nThe glossary at the end of each chapter defines common jargon you might encounter while learning R. This specialised vocabulary can help you to communicate more efficiently and to search for solutions to problems. The terms below link to our PsyTeachR glossary, which contains further information and examples.\n\n\n\n\nterm\n\n\ndefinition\n\n\n\n\n\nargument\n\n\n\n\n\n\nbase R\n\n\n\n\n\n\ncharacter\n\n\n\n\n\n\nchunk\n\n\n\n\n\n\nconflict\n\n\n\n\n\n\nCRAN\n\n\n\n\n\n\ndata wrangling\n\n\n\n\n\n\ndefault value\n\n\n\n\n\n\nfactor\n\n\n\n\n\n\nfunction\n\n\n\n\n\n\nIDE\n\n\n\n\n\n\nknit\n\n\n\n\n\n\nnumeric\n\n\n\n\n\n\nobject\n\n\n\n\n\n\npackage\n\n\n\n\n\n\npanes\n\n\n\n\n\n\nR Markdown\n\n\n\n\n\n\nscript\n\n\n\n\n\n\nstring\n\n\n\n\n\n\nvector",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R and RStudio</span>"
    ]
  },
  {
    "objectID": "01-intro.html#sec-resources-intro",
    "href": "01-intro.html#sec-resources-intro",
    "title": "1  Intro to R and RStudio",
    "section": "\n1.8 Further Resources",
    "text": "1.8 Further Resources\n\nRStudio IDE Cheatsheet\nRStudio Cloud",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R and RStudio</span>"
    ]
  },
  {
    "objectID": "02-reports.html",
    "href": "02-reports.html",
    "title": "2  Reports with R Markdown",
    "section": "",
    "text": "Intended Learning Outcomes",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reports with R Markdown</span>"
    ]
  },
  {
    "objectID": "02-reports.html#sec-ilo-reports",
    "href": "02-reports.html#sec-ilo-reports",
    "title": "2  Reports with R Markdown",
    "section": "",
    "text": "Be able to structure a project\nBe able to knit a simple reproducible report with R Markdown\nBe able to create code chunks, tables, images, and inline R in an R Markdown document",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reports with R Markdown</span>"
    ]
  },
  {
    "objectID": "02-reports.html#functions-ch02",
    "href": "02-reports.html#functions-ch02",
    "title": "2  Reports with R Markdown",
    "section": "\n2.1 Functions used",
    "text": "2.1 Functions used\n*count(), filter(), geom_bar(), geom_col(), ggplot(), include_graphics(), install_tinytex(), kable(), kable_classic(), labs(), max(), min(), nrow(), read_csv(), row_spec(), str(), summary(), View().\nDownload the R Markdown Cheat Sheet",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reports with R Markdown</span>"
    ]
  },
  {
    "objectID": "02-reports.html#sec-walkthrough-reports",
    "href": "02-reports.html#sec-walkthrough-reports",
    "title": "2  Reports with R Markdown",
    "section": "Walkthrough video",
    "text": "Walkthrough video\nThere is a walkthrough video of this chapter available via Echo360. Please note that there may have been minor edits to the book since the video was recorded. Where there are differences, the book should always take precedence.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reports with R Markdown</span>"
    ]
  },
  {
    "objectID": "02-reports.html#sec-setup-reports",
    "href": "02-reports.html#sec-setup-reports",
    "title": "2  Reports with R Markdown",
    "section": "\n2.2 Setup",
    "text": "2.2 Setup\nFor reference, here are the packages we will use in this chapter. You may need to install them, as explained in Section 1.4.1, if running the code below in the console pane gives you the error Error in library(package_name) : there is no package called ‘packagename’.\n\n\n\nChapter packages\n\nlibrary(tidyverse)  # various data manipulation functions\nlibrary(knitr)      # for rendering a report from a script\nlibrary(rmarkdown)  # for using R markdown\nlibrary(kableExtra) # for styling tables",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reports with R Markdown</span>"
    ]
  },
  {
    "objectID": "02-reports.html#sec-projects",
    "href": "02-reports.html#sec-projects",
    "title": "2  Reports with R Markdown",
    "section": "\n2.3 Organising a project",
    "text": "2.3 Organising a project\nBefore we write any code, first, we need to get organised. Projects in RStudio are a way to group all the files you need for one project. Most projects include scripts, data files, and output files like the PDF report created by the script or images.\n\n2.3.1 Default working directory\nFirst, make a new directory (i.e., folder) on your computer where you will keep all of your R projects. Name it something like “R-projects” (avoid spaces and other special characters). Make sure you know how to get to this directory using your computer’s Finder or Explorer.\n\n\n\n\n\n\nAvoid networked drives\n\n\n\nIf possible, don’t use a network or cloud drive (e.g., OneDrive or Dropbox), as this can sometimes cause problems. If you’re working from a networked drive and you are having issues, a helpful test is to try moving your project folder to the desktop to see if that solves the problem.\n\n\nNext, open Tools &gt; Global Options…, navigate to the General pane, and set the “Default working directory (when not in a project)” to this directory. Now, if you’re not working in a project, any files or images you make will be saved in this working directory.\n\n\n\n\n\n\nAvoid long path names\n\n\n\nOn some versions of Windows 10 and 11, it can cause problems if path names are longer than 260 characters. Set your default working directory to a path with a length well below that to avoid problems when R creates temporary files while rendering a report. If you are having issues, a helpful test is to try moving your project folder to the desktop to see if that solves the problem as this will likely have a much short path name than most other folders on your computer.\n\n\nYou can set the working directory to another location manually with menu commands: Session &gt; Set Working Directory &gt; Choose Directory… However, there’s a better way of organising your files by using Projects in RStudio.\n\n2.3.2 Start a Project\nStart by making a directory inside your default project directory where you will keep all of your materials for this class; we’d suggest naming it something like ADS-23.\nTo create a new project for the work we’ll do in this chapter:\n\nFile &gt; New Project…\nName the project 02-reports\n\nSave it inside the ADS-23 directory\n\nRStudio will restart itself and open with this new project directory as the working directory.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.1: Starting a new project.\n\n\nClick on the Files tab in the lower right pane to see the contents of the project directory. You will see a file called 02-reports.Rproj, which is a file that contains all of the project information. When you’re in the Finder/Explorer, you can double-click on it to open up the project.\n\n\n\n\n\n\nDot files\n\n\n\nDepending on your settings, you may also see a directory called .Rproj.user, which contains your specific user settings. You can ignore this and other “invisible” files that start with a full stop.\n\n\n\n\n\n\n\n\nDon’t nest projects\n\n\n\nDon’t ever save a new project inside another project directory. This can cause some hard-to-resolve problems.\n\n\n\n2.3.3 Naming Things\nBefore we start creating new files, it’s important to review how to name your files. This might seem a bit pedantic, but following clear naming rules so that both people and computers can easily find things will make your life much easier in the long run. Here are some important principles:\n\nfile and directory names should only contain letters, numbers, dashes, and underscores, with a full stop (.) between the file name and extension (that means no spaces!)\nbe consistent with capitalisation (set a rule to make it easy to remember, like always use lowercase)\nuse underscores (_) to separate parts of the file name, like the title and date, and dashes (-) to separate words in each part (e.g., social-media-report_2021-10.Rmd)\nname files with a pattern that alphabetises in a sensible order and makes it easy for you to find the file you’re looking for\nprefix a file name with an underscore to move it to the top of the list, or prefix all files with numbers to control their order\n\nFor example, these file names are a mess:\n\nreport.doc\nreport final.doc\nData (Customers) 11-15.xls\nCustomers Data Nov 12.xls\nfinal report2.doc\nproject notes.txt\nVendor Data November 15.xls\n\nHere is one way to structure them so that similar files have the same structure and it’s easy for a human to scan the list or to use code to find relevant files. See if you can figure out what the last one should be.\n\n_project-notes.txt\nreport_v1.doc\nreport_v2.doc\nreport_v3.doc\ndata_customer_2021-11-12.xls\ndata_customer_2021-11-15.xls\n\nvendor-data_2021-11-15.xls\ndata-vendor-2021_11_15.xls\ndata_vendor_2021-11-15.xls\ndata_2021-11-15_vendor.xls\n\n\n\n\n\n\n\nNaming practice\n\n\n\nThink of other ways to name the files above. Look at some of your own project files and see what you can improve.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reports with R Markdown</span>"
    ]
  },
  {
    "objectID": "02-reports.html#sec-rmarkdown",
    "href": "02-reports.html#sec-rmarkdown",
    "title": "2  Reports with R Markdown",
    "section": "\n2.4 R Markdown",
    "text": "2.4 R Markdown\nThroughout this course we will use R Markdown to create reproducible reports with a table of contents, text, tables, images, and code. The text can be written using markdown, which is a way to specify formatting, such as headers, paragraphs, lists, bolding, and links.\n\n2.4.1 New document\nTo open a new R Markdown document, click File &gt; New File &gt; R Markdown. You will be prompted to give it a title; title it Important Info. You can also change the author name. Keep the output format as HTML.\nOnce you’ve opened a new document be sure to save it by clicking File &gt; Save As…. You should name this file important_info (if you are on a Mac and can see the file extension, name it important_info.Rmd). This file will automatically be saved in your project folder (i.e., your working directory) so you should now see this file appear in your file viewer pane.\nWhen you first open a new R Markdown document you will see a bunch of welcome text that looks like this:\n\n\n\n\n\n\n\nFigure 2.2: New R Markdown text\n\n\n\n\nDo the following steps:\n\nChange the title to “Important Information” and the author to your name\nDelete everything after the setup chunk\nSkip a line after the setup chunk and type “## My info” (with the hashes but without the quotation marks); make sure there are no spaces before the hashes and at least one space after the hashes before the subtitle\nSkip a line and click the insert new code menu (a green box with a C and a plus sign) then choose R\n\n\nYour Markdown document should now look something like this:\n\n\n\n\n\n\n\nFigure 2.3: New R chunk\n\n\n\n\n\n2.4.2 Code chunks\nWhat you have created is a subtitle and a code chunk. In R Markdown, anything written in a grey code chunk is assumed to be code, and anything written in the white space (between the code chunks) is regarded as normal text (the actual colours will depend on which theme you have applied, but we will refer to the default white and grey). This makes it easy to combine both text and code in one document.\n\n\n\n\n\n\nCode chunk errors\n\n\n\nWhen you create a new code chunk you should notice that the grey box starts and ends with three back ticks ```. One common mistake is to accidentally delete these back ticks. Remember, code chunks and text entry are different colours - if the colour of certain parts of your Markdown doesn’t look right, check that you haven’t deleted the back ticks.\n\n\nIn your code chunk, write the code you created in Section 1.5.\n\n\n\nimportant_info.Rmd\n\nname &lt;- \"Emily\"\nage &lt;- 36\ntoday &lt;- Sys.Date()\nchristmas &lt;- as.Date(\"2024-12-25\")\n\n\n\n\n\n\n\n\nConsole vs Scripts\n\n\n\nIn Chapter 1, we asked you to type code into the console. Now, we want you to put code into code chunks in R Markdown files to make the code reproducible. This way, you can re-run your code any time the data changes to update the report, and you or others can inspect the code to identify and fix any errors.\nHowever, there will still be times that you need to put code in the console instead of in a script, such as when you install a new package. In this book, code chunks will be labelled with whether you should run them in the console or add the code to a script.\n\n\n\n2.4.3 Running code\nWhen you’re working in an R Markdown document, there are several ways to run your lines of code.\nFirst, you can highlight the code you want to run and then click Run &gt; Run Selected Line(s), however this is tedious and can cause problems if you don’t highlight exactly the code you want to run.\nAlternatively, you can press the green “play” button at the top-right of the code chunk and this will run all lines of code in that chunk.\n\n\n\n\n\n\n\nFigure 2.4: Click the green arrow to run all the code in the chunk.\n\n\n\n\nEven better is to learn some of the keyboard short cuts for R Studio. To run a single line of code, make sure that the cursor is in the line of code you want to run (it can be anywhere) and press Ctrl+Enter or Cmd+Enter. If you want to run all of the code in the code chunk, press Ctrl+Shift+Enter or Cmd+Shift+Enter. Learn these short cuts; they will make your life easier!\n\n\n\n\n\n\n\nFigure 2.5: Use the keyboard shortcut to run only highlighted code, or run one line at a time by placing the cursor on a line without highlighting anything.\n\n\n\n\nRun your code using each of the methods above. You should see the variables name, age, today, and christmas appear in the environment pane. (Restart R to reset.)\n\n2.4.4 Inline code\nWe keep talking about using R Markdown for reproducible reports, but it’s easier to show you than tell you why this is so powerful and to give you an insight into how this course will (hopefully!) change the way you work with data forever!\nOne important feature of R Markdown is that you can combine text and code to insert values into your writing using inline coding. If you’ve ever had to copy and paste a value or text from one file to another, you’ll know how easy it can be to make mistakes. Inline code avoids this. Again it’s easier to show you what inline code does rather than to explain it so let’s have a go.\nFirst, copy and paste this text to the white space underneath your code chunk. If you used a different variable name than christmas, you should update this with the name of the object you created, but otherwise don’t change anything else.\nMy name is `r name` and I am `r age` years old. \nIt is `r christmas - today` days until Christmas, \nwhich is my favourite holiday.\n\n\n\n\n\n\nDisplaying Plots\n\n\n\nYou cannot display a plot using inline R. Plots should be displayed from code chunks. We’ll come back to how to do this soon.\n\n\n\n2.4.5 Knitting your file\nNow we are going to knit, or compile, the file into a document type of our choosing. In this case we’ll create a default html file, but you will learn how to create other files like Word and PDF throughout this course. To knit your file, click Knit &gt; Knit to HMTL.\nR Markdown will create and display a new HTML document, but it will also automatically save this file in your working directory.\nAs if by magic, that slightly odd bit of text you copied and pasted now appears as a normal sentence with the values pulled in from the objects you created.\n\nMy name is Emily and I am 36 years old. It is 280 days until Christmas, which is my favourite holiday.\n\n\n\n\n\n\n\nKnitting with Code\n\n\n\n\n\nYou can also knit by typing the following code into the console. Never put this in an Rmd script itself, or it will try to knit itself in an infinite loop.\n\n\n\nRun in the console\n\nrmarkdown::render(\"important_info.Rmd\")\n\n# alternatively, you can use this, but may get a warning\nknitr::knit2html(\"important_info.Rmd\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reports with R Markdown</span>"
    ]
  },
  {
    "objectID": "02-reports.html#loading-data",
    "href": "02-reports.html#loading-data",
    "title": "2  Reports with R Markdown",
    "section": "\n2.5 Loading data",
    "text": "2.5 Loading data\nNow let’s try another example of using Markdown, but this time rather than using objects we have created from scratch, we will read in a data file.\nSave and close your important_info.Rmd document. Then open and save a new Markdown document, this time named sales_data.Rmd. You can again get rid of everything after the setup chunk. Add library(tidyverse) to the setup chunk so that tidyverse functions are available to your script.\n\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\nlibrary(tidyverse)\n```\n\n\n\n2.5.1 Online sources\nFirst, let’s try loading data that is stored online. Create a code chunk in your document and copy, paste, and run the below code. This code loads some simulated sales data.\n\nThe data is stored in a .csv file so we’re going to use the read_csv() function to load it in.\nNote that the url is contained within double quotation marks - it won’t work without this.\n\n\n\n\nsales_data.Rmd\n\nsales_online &lt;- read_csv(\"https://psyteachr.github.io/ads-v2/data/sales_data_sample.csv\")\n\n\n\n\n\n\n\n\nCould not find function\n\n\n\nIf you get an error message that looks like:\n\nError in read_csv(“https://psyteachr.github.io/ads-v2/data/sales_data_sample.csv”) :\ncould not find function “read_csv”\n\nThis means that you have not loaded tidyverse. Check that library(tidyverse) is in the setup chunk and that you have run the setup chunk.\n\n\nThis dataset is simulated sales data for different types of vehicles (originally from Kaggle) where each line of data is a single order. There are multiple ways to view and check a dataset in R. Do each of the following and make a note of what information each approach seems to give you. If you’d like more information about each of these functions, you can look up the help documentation with ?function:\n\nClick on the sales_online object in the environment pane\nRun head(sales_online) in the console\nRun summary(sales_online) in the console\nRun str(sales_online) in the console\nRun View(sales_online) in the console\n\n2.5.2 Local data files\nMore commonly, you will be working from data files that are stored locally on your computer. But where should you put all of your files? You usually want to have all your scripts and data files for a single project inside one folder on your computer, that project’s working directory, and we have already set up the main directory 02-reportsfor this chapter.\nYou can organise files in subdirectories inside this main project directory, such as putting all raw data files in a subdirectory called data and saving any image files to a subdirectory called images. Using subdirectories helps avoid one single folder becoming too cluttered, which is important if you’re working on big projects.\nIn your 02-reports directory, create a new folder named data, download a copy of the sales data file, and save it in this new subdirectory.\nTo load in data from a local file, again we can use the read_csv() function, but this time rather than specifying a url, give it the subdirectory and file name.\n\n\n\nsales_data.Rmd\n\nsales_local &lt;- read_csv(\"data/sales_data_sample.csv\")\n\n\n\n\n\n\n\n\nTab-autocomplete file names\n\n\n\nUse tab auto-complete when typing file names in a code chunk. After you type the first quote, hit tab to see a drop-down menu of the files in your working directory. You can start typing the name of the subdirectory or file to narrow it down. This is really useful for avoiding annoying errors because of typos or files not being where you expect.\n\n\nThings to note:\n\nYou must include the file extension (in this case .csv)\nThe subdirectory folder name (data) and the file name are separated by a forward slash /\n\nPrecision is important, if you have a typo in the file name it won’t be able to find your file; remember that R is case sensitive - Sales_Data.csv is a completely different file to sales_data.csv as far as R is concerned.\n\n\n\n\n\n\n\nView sales_local\n\n\n\nRun head(), summary(), str(), and View() on sales_local to confirm that the data is the same as sales_online.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reports with R Markdown</span>"
    ]
  },
  {
    "objectID": "02-reports.html#writing-a-report",
    "href": "02-reports.html#writing-a-report",
    "title": "2  Reports with R Markdown",
    "section": "\n2.6 Writing a report",
    "text": "2.6 Writing a report\nWe’re going to write a basic report for this sales dataset using R Markdown to show you some of the features. We’ll be expanding on almost every bit of what we’re about to show you throughout this course; the most important outcome is that you start to get comfortable with how R Markdown works and what you can use it to do.\n\n2.6.1 Data analysis\nFor this report we’re just going to present some simple sales stats for three types of vehicles: planes, motorcycles, and classic cars. We’ll come back to how to write this kind of code yourself in ?sec-summary. For now, see if you can follow the logic of what the code is doing via the code comments.\nCreate a new code chunk, then copy, paste and run the following code and then view sales_counts by clicking on the object in the environment pane. Note that it doesn’t really matter whether you use sales_local or sales_online in the first line as they’re identical.\n\n\n\nsales_data.Rmd\n\n# keep only the data from planes, motorcycles, and cars\nsales_pmc &lt;- filter(sales_online,\n         PRODUCTLINE %in% c(\"Planes\", \"Motorcycles\", \"Classic Cars\"))\n\n# count how many are in each PRODUCTLINE\nsales_counts &lt;-count(sales_pmc, PRODUCTLINE)\n\n\nBecause each row of the dataset is a sale, this code gives us a nice and easy way of seeing how many sales were made of each type of vehicle; it just counts the number of rows in each group.\n\n\n\n\n\n\nPRODUCTLINE\n\n\nn\n\n\n\n\n\nClassic Cars\n\n\n967\n\n\n\n\nMotorcycles\n\n\n331\n\n\n\n\nPlanes\n\n\n306\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nJust putting an object by itself on a line “prints” it. Section 2.6.5 will show you how to print the table in different formats for your report.\n\n\n\n2.6.2 Text formatting\nYou can use the visual markdown editor if you have RStudio version 1.4 or higher. This will be a button at the top of the source pane and the menu options should be very familiar to anyone who has worked with software like Microsoft Word.\n\n\n\n\n\n\n\nFigure 2.6: The visual editor.\n\n\n\n\nThis is useful for complex styling, but you can also use these common plain-text style markups:\n\nHeaders are created by prefacing subtitles with one or more hashes (#) and a space (do not exclude the space). If you include a table of contents, this will be created from your document headers.\nFormat text with italics or bold by surrounding the text with one or two asterisks or underscores.\nMake lists using numbers, asterisks or dashes before items. Indent items to make nested lists.\nMake links like this: [psyTeachR](https://psyteachr.github.io/)\n\nDownload the R Markdown Cheat Sheet to learn more.\n\nCopy and paste the below text into the white space below the code chunk that loads in the data. Save the file and then click knit to view the results. It will look a bit messy for now as it contains the code and messages from loading the data but don’t worry, we’ll get rid of that soon.\n## Sample sales report\n\nThis report summarises the sales data for different types of vehicles sold between 2003 and 2005. This data is from [Kaggle](https://www.kaggle.com/kyanyoga/sample-sales-data).\n\n### Sales by type\n\nThe *total* number of **planes** sold was `r sales_counts$n[3]`\n\nThe *total* number of **classic cars** sold was `r sales_counts$n[1]`.\n\n\n\n\n\n\nWarning\n\n\n\nThe example markdown above (and in the rest of this book) is shown for the regular editor, not the visual editor. In the visual editor, you won’t see the hashes that create headers, or the asterisks that create bold and italic text. You also won’t see the backticks that demarcate inline code.\n\n\n\n\nThe example code above shown in the visual editor.\n\n\n\nIf you try to add the hashes, asterisks and backticks to the visual editor, you will get frustrated as they disappear. If you succeed, your code in the regular editor will look mangled like this:\n\\#\\#\\# Sales by type\n\nThe \\*total\\* number of \\*\\*planes\\*\\* sold was \\`r sales_counts\\$n\\[3]\\`\n\n\nTry and match up the inline code with what is in the sales_counts table. Of note:\n\nThe $ sign is used to indicate specific variables (or columns) in an object using the object$variable syntax.\nSquare brackets with a number e.g., [3] indicate a particular observation\nSo sales_counts$n[3] asks the inline code to display the third observation of the variable n in the dataset sales_online.\n\n\n\n\n\n\n\nFurther Practice\n\n\n\nAdd another line that reports the total numbers of motorcycles using inline code. Using either the visual editor or text markups, add in bold and italics so that it matches the others.\n\n\nSolution\n\nThe *total* number of **motorcycles** sold was `r sales_counts$n[2]`.\n\n\n\n\n2.6.3 Code comments\nIn the above code we’ve used code comments and it’s important to highlight how useful these are. You can add comments inside R chunks with the hash symbol (#). R will ignore characters from the hash to the end of the line.\n\n# important numbers\n\nn &lt;- nrow(sales_online) # the total number of sales (number of rows)\nfirst &lt;- min(sales_online$YEAR_ID) # the first (minimum) year\nlast &lt;- max(sales_online$YEAR_ID) # the last (maximum) year\n\nIt’s usually good practice to start a code chunk with a comment that explains what you’re doing there, especially if the code is not explained in the text of the report.\nIf you name your objects clearly, you often don’t need to add clarifying comments. For example, if I’d named the three objects above total_number_of_sales, first_year and last_year, I would omit the comments. It’s a bit of an art to comment your code well, but try to add comments as you’re working through this book - it will help consolidate your learning and when future you comes to review your code, you’ll thank past you for being so clear.\n\n2.6.4 Images\nAs the saying goes, a picture paints a thousand words and sometimes you will want to communicate your data using visualisations.\nCreate a code chunk to display a graph of the data in your document after the text we’ve written so far. We’ll use some code that you’ll learn more about in Chapter 3 to make a simple bar chart that represents the sales data – focus on trying to follow how bits of the code map on to the plot that is created.\nCopy and paste the below code. Run the code in your Markdown to see the plot it creates and then knit the file to see how it is displayed in your document.\n\n\n\nsales_data.Rmd\n\nggplot(data = sales_counts, \n       mapping = aes(x = PRODUCTLINE, \n                     y = n, \n                     fill = PRODUCTLINE)) +\n  geom_col(show.legend = FALSE) +\n  labs(x = \"Type of vehicle\",\n       y = \"Number of sales\",\n       title = \"Sales by vehicle type\",\n       subtitle = \"2003 - 2005\")\n\n\n\n\n\n\n\n\nYou can also include images that you did not create in R using the markdown syntax for images or knitr::include_graphics(). This is very similar to loading data in that you can either use an image that is stored on your computer, or via a url.\nCreate a new code chunk underneath each of the sales figures for planes, classic cars, and motorcycles and add in an image from Google or Wikipedia for each (right click on an image and select copy image address to get a url). See the section on chunk defaults to see how to change the display size.\n\n\n\nsales_data.Rmd\n\nknitr::include_graphics(\"https://upload.wikimedia.org/wikipedia/commons/3/3f/P-51_Mustang_edit1.jpg\")\n\n\n\n\n\n\n\n\nImage Licenses\n\n\n\n\n\nMost images on Wikipedia are public domain or have an open license. You can search for images by license on Google Images by clicking on the Tools button and choosing “Creative Commons licenses” from the “Usage Rights” menu.\n\n\n\n\n\n\n\n\n\n\n\nAlternatively, you can use the markdown notation ![caption](url) to show an image. This goes in the markdown text section of the document, not inside is grey code block. The caption is optional; you can omit it like this:\n![](images/reports/google-images.png)\n\n2.6.5 Tables\nRather than a figure, we might want to display our data in a table.\n\nAdd a new level 2 heading (two hashtags) to your document, name the heading “Data in table form” and then create a new code chunk below this.\n\nFirst, let’s see what the table looks like if we don’t make any edits. Simply write the name of the table you want to display in the code chunk (in our case sales_counts) and then click knit to see what it looks like.\n\n\n\nsales_data.Rmd\n\nsales_counts\n\n\n## # A tibble: 3 × 2\n## # Groups:   PRODUCTLINE [3]\n##   PRODUCTLINE      n\n##   &lt;chr&gt;        &lt;int&gt;\n## 1 Classic Cars   967\n## 2 Motorcycles    331\n## 3 Planes         306\nIt’s just about readable but it’s not great.\nAnother way to customise tables uses the function kable() from the kableExtra package.\nAmend your code to load the kableExtra package and apply the kable() function to the table. Once you’ve done this, knit the file again to see the output.\n\n\n\nsales_data.Rmd\n\nlibrary(kableExtra) # for table display\n\nkable(sales_counts) # apply the kable function\n\n\n\n\n\nPRODUCTLINE\nn\n\n\n\nClassic Cars\n967\n\n\nMotorcycles\n331\n\n\nPlanes\n306\n\n\n\n\n\n\nIt’s better, but it’s still not amazing. So let’s make a few adjustments. We can change the names of the columns, add a caption, and also change the alignment of the cell contents using arguments to kable().\nWe can also add a theme to change the overall style. In this example we’ve used kable_classic but there are 5 others: kable_paper, kable_classic_2, kable_minimal, kable_material and kable_material_dark. Try them all and see which one you prefer.\nFinally, we can change the formatting of the first row using row_spec. Look up the help documentation for row_spec to see what other options are available. Try changing the value of any of the arguments below to figure out what they do.\n\n\n\nsales_data.Rmd\n\nk &lt;- kable(sales_counts, \n      col.names = c(\"Product\", \"Sales\"),\n      caption = \"Number of sales per product line.\", \n      align = \"c\")\nk_style &lt;- kable_classic(k, full_width = FALSE) \nk_highlighted &lt;- row_spec(k_style, row = 0, bold = TRUE, color = \"red\") \n\nk_highlighted\n\n\n\n\nNumber of sales per product line.\n\nProduct\nSales\n\n\n\nClassic Cars\n967\n\n\nMotorcycles\n331\n\n\nPlanes\n306\n\n\n\n\n\n\n\n\n\n\n\n\nCaption placement\n\n\n\nThe appearance and placement of the table caption depends on the type of document you are creating. Your captions may look different to those in this book because you are creating a single-page html_document, while this book uses the html style from quarto, which is a newer alternative to R Markdown. You’ll learn more about other document output types in ?sec-custom-reports.\n\n\n\n\n\n\n\n\nAdvanced table customisation\n\n\n\n\n\nIf you’re feeling confident with what we have covered so far, the kableExtra vignette gives a lot more detail on how you can edit your tables using kableExtra.\nYou can also explore the gt package, which is complex, but allows you to create beautiful customised tables. Riding tables with {gt} and {gtExtras} is an outstanding tutorial.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reports with R Markdown</span>"
    ]
  },
  {
    "objectID": "02-reports.html#refining-your-report",
    "href": "02-reports.html#refining-your-report",
    "title": "2  Reports with R Markdown",
    "section": "\n2.7 Refining your report",
    "text": "2.7 Refining your report\n\n2.7.1 Chunk defaults\nLet’s finish by tidying up the report and organising our code a bit better. When you create a new R Markdown file in RStudio, a setup chunk is automatically created - we’ve mostly ignored this chunk until now.\n\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n\nYou can set more default options for your document here. Type the following code into the console to see the full list of options that you can set and their default values. However, the most useful and common options to change for the purposes of writing reports revolve around whether you want to show your code and the size of your images.\n\n\n\nRun in the console\n\n# list option default values\nstr(knitr::opts_chunk$get())\n\n\nReplace the code in your setup chunk with the below code and then try changing each option from FALSE to TRUE and changing the numeric values then knit the file again to see the difference it makes.\n\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  echo       = FALSE, # whether to show code chunks\n  message    = FALSE, # whether to show messages from your code\n  warning    = FALSE, # whether to show warnings from your code\n  fig.width  = 8,     # figure width in inches (at 96 dpi)\n  fig.height = 5,     # figure height in inches (at 96 dpi)\n  out.width = \"50%\"   # figures/images span 50% of the page width\n)\n```\n\n\n\n\n\n\n\n\nFigure versus output dimensions\n\n\n\n\n\nNote that fig.width and fig.height control the original size and aspect ratio of images generated by R, such as plots. This will affect the relative size of text and other elements in plots. It does not affect the size of existing images at all. However, out.width controls the display size of both existing images and figures generated by R. This is usually set as a percentage of the page width.\n\n\n\n\n\n\n\nFigure 2.7: A plot with the default values of fig.width = 8, fig.height = 5, out.width = “100%”\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.8: The same plot with half the default width and height: fig.width = 4, fig.height = 2.5, out.width = “100%”\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.9: The same plot as above at half the output width: fig.width = 4, fig.height = 2.5, out.width = “50%”\n\n\n\n\n\n\n\n\n2.7.2 Override defaults\nThese setup options change the behaviour for the entire document, however, you can override the behaviour for individual code chunks.\nFor example, by default you might want to hide your code but there also might be an occasion where you want to show the code you used to analyse your data. You can set echo = FALSE in your setup chunk to make hiding code the default but in the individual code chunk for your plot set echo = TRUE. Try this now and knit the file to see the results.\n\n\n```{r, echo = TRUE}\nggplot(data = sales_counts, \n       mapping = aes(x = PRODUCTLINE, \n                     y = n, \n                     fill = PRODUCTLINE)) +\n  geom_col(show.legend = FALSE) +\n  labs(x = \"Type of vehicle\",\n       y = \"Number of sales\",\n       title = \"Sales by vehicle type\",\n       subtitle = \"2003 - 2005\")\n```\n\n\nAdditionally, you can also override the default image display size or dimensions.\n\n\n```{r, out.width='25%'}\nknitr::include_graphics(\"https://upload.wikimedia.org/wikipedia/commons/3/3f/P-51_Mustang_edit1.jpg\")\n```\n\n\n\n\n```{r, fig.width = 10, fig.height = 20}\nggplot(data = sales_counts, \n       mapping = aes(x = PRODUCTLINE, y = n, fill = PRODUCTLINE)) +\n  geom_bar(stat = \"identity\", show.legend = FALSE) +\n  labs(x = \"Type of vehicle\",\n       y = \"Number of sales\",\n       title = \"Sales by vehicle type\",\n       subtitle = \"2003 - 2005\")\n```\n\n\n\n2.7.3 Loading packages\nYou should add the packages you need in your setup chunk using library(). Often when you are working on a script, you will realize that you need to load another add-on package. Don’t bury the call to library(package_I_need) way down in the script. Put it in the setup chunk so the user has an overview of what packages are needed.\n\n\n\n\n\n\nMove library calls to the setup chunk\n\n\n\nMove the code that loads the tidyverse and kableExtra to the setup chunk.\n\n\n\n2.7.4 YAML header\nFinally, the YAML header is the bit at the very top of your Markdown document. You can set several options here as well.\n---\ntitle: \"Sales Data Report\"\nauthor: \"Your name\"\noutput:\n  html_document:\n    df_print: paged\n    theme: \n      version: 4\n      bootswatch: yeti\n    toc: true\n    toc_float:\n      collapsed: false\n      smooth_scroll: false\n    toc_depth: 3\n    number_sections: false\n---\n\n\n\n\n\n\nTry\n\n\n\nTry changing the values from false to true to see what the options do.\n\n\nThe df_print: paged option prints data frames using rmarkdown::paged_table() automatically. You can use df_print: kable to default to the simple kable style, but you will need the code from Section 2.6.5 for more complex tables with kableExtra.\nThe built-in bootswatch themes are: default, cerulean, cosmo, darkly, flatly, journal, lumen, paper, readable, sandstone, simplex, spacelab, united, and yeti. You can view and download more themes. Try changing the theme to see which one you like best.\n\n\n\n\n\n\n\nFigure 2.10: Light themes in versions 3 and 4.\n\n\n\n\n\n\n\n\n\n\nYAML formatting\n\n\n\nYAML headers can be very picky about spaces and semicolons (the rest of R Markdown is much more forgiving). For example, if you put a space before “author”, you will get an error that looks like:\nError in yaml::yaml.load(..., eval.expr = TRUE) : \n  Parser error: while parsing a block mapping at line 1, \n  column 1 did not find expected key at line 2, column 2\nThe error message will tell you exactly where the problem is (the second character of the second line of the YAML header), and it’s usually a matter of fixing typos or making sure that the indenting is exactly right.\n\n\n\n2.7.5 Table of Contents\nThe table of contents is created by setting toc: true. It will be displayed at the top of your document unless you set toc_float: true or include toc_float: with its options collapsed and smooth_scroll (options for a setting are indented under it).\n---\noutput:\n  html_document:\n    toc: true\n    toc_float:\n      collapsed: false\n      smooth_scroll: false\n    toc_depth: 3\n---\nThis will use the markdown header structure to create the table of contents. toc_depth: 3 means that the table of contents will only display headers up to level 3 (i.e., those that start with three hashes: ###). Add {-} after the header title to remove it from the table of contents (e.g., ### Overview {-}).\n\n\n\n\n\n\nMalformated ToC\n\n\n\nIf your table of contents isn’t showing up correctly, this probably means that your headers are not set up right. Make sure that headers have no spaces before the hashes and at least one space after the hashes. For example, ##Analysis won’t display as a header and be added to the table of contents, but ## Analysis will.\n\n\n\n2.7.6 Formats\nSo far we’ve just knitted to html. To generate PDF reports, you need to install tinytex(Xie, 2021) and run the following code in the console (do not add this to your Rmd file):\n\ninstall.packages(\"tinytex\")\ntinytex::install_tinytex()\n\nOnce you’ve done this, update your YAML heading to add a pdf_document section and knit a PDF document. The options for PDFs are more limited than for HTML documents, so if you just replace html_document with pdf_document, you may need to remove some options, such as toc_float if you get an error that looks like “Functions that produce HTML output found in document targeting PDF output.”\n---\noutput:\n  pdf_document:\n    toc: TRUE\n  html_document:\n    toc: TRUE\n    toc_float: TRUE\n---\nAs an alternative, you can also knit to a Word document. When you click the Knit button, the first format will knit by default, but you can use the drop-down menu under the Knit button to choose another format.\n---\noutput:\n  pdf_document:\n    toc: TRUE\n  html_document:\n    toc: TRUE\n    toc_float: TRUE\n  word_document:\n    toc: TRUE\n---\n\n\n\n\n\n\nKnitting errors\n\n\n\nIf you encounter errors, ask on Teams for help - knitting to PDF or Word can be tricky.\n\n\n\n2.7.7 Summary\nThis chapter has covered a lot but hopefully now you have a much better idea of what Markdown is able to do. Whilst working in Markdown takes longer in the initial set-up stage, once you have a fully reproducible report you can plug in new data each week or month and simply click knit, reducing duplication of effort, and the human error that comes with it.\nYou can access a working R Markdown file with the code from the example above to compare to your own code.\nAs you continue to work through the book you will learn how to wrangle and analyse your data and how to use Markdown to present it. We’ll slowly build on the available customisation options so over the course of next few weeks, you’ll find your Markdown reports start to look more polished and professional.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reports with R Markdown</span>"
    ]
  },
  {
    "objectID": "02-reports.html#sec-exercises-reports",
    "href": "02-reports.html#sec-exercises-reports",
    "title": "2  Reports with R Markdown",
    "section": "\n2.8 Exercises",
    "text": "2.8 Exercises\nBelow are some additional exercises that will let you apply what you have learned in this chapter. We would suggest taking a break before you do these - it might feel slightly more effortful, but spreading out your practice will help you learn more in the long run.\n\n2.8.1 New project\nCreate a new project called “demo_report” (Section 2.3).\n\n2.8.2 New script\nIn the “demo_report” project, create a new Rmarkdown document called “job.Rmd” (Section 2.4). Edit the YAML header to output tables using kable and set a custom theme (Section 2.7.4).\n\n\nSolution\n\n---\ntitle: \"My Job\"\nauthor: \"Me\"\noutput:\n  html_document:\n    df_print: kable\n    theme: \n      version: 4\n      bootswatch: sandstone\n---\n\n\n2.8.3 R Markdown\nWrite a short paragraph describing your job or a job you might like to have in the future (Section 2.6.2). Include a bullet-point list of links to websites that are useful for that job (Section 2.6.2).\n\n\nSolution\n\nI am a research psychologist who is interested in open science \nand teaching computational skills.\n\n* [psyTeachR books](https://psyteachr.github.io/)\n* [Google Scholar](https://scholar.google.com/)\n\n\n2.8.4 Tables\nUse the following code to load a small table of tasks (Section 2.4.2). Edit it to be relevant to your job (you can change the categories entirely if you want).\n\n\n\njob.Rmd\n\ntasks &lt;- tibble::tribble(\n  ~task,                   ~category,      ~frequency,\n  \"Respond to tweets\",     \"social media\", \"daily\",\n  \"Create a twitter poll\", \"social media\", \"weekly\",\n  \"Make the sales report\", \"reporting\",    \"montly\"\n)\n\n\nFigure out how to make it so that code chunks don’t show in your knitted document (Section 2.7.1).\n\n\nSolution\n\nYou can set the default to echo = FALSE in the setup chunk at the top of the script.\n\nknitr::opts_chunk$set(echo = FALSE)\n\nTo set visibility for a specific code chunk, put echo = FALSE inside the curly brackets.\n\n\n```{r, echo=FALSE}\n# code to hide\n```\n\n\n\nDisplay the table with purple italic column headers. Try different styles using kableExtra (Section 2.6.5).\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nk &lt;- kableExtra::kable(tasks)\nk_style &lt;- kableExtra::kable_minimal(k)\nk_highlight &lt;- kableExtra::row_spec(k_style,\n                                    row = 0, \n                                    italic = TRUE, \n                                    color = \"purple\")\nk_highlight\n\n\n\n\ntask\ncategory\nfrequency\n\n\n\nRespond to tweets\nsocial media\ndaily\n\n\nCreate a twitter poll\nsocial media\nweekly\n\n\nMake the sales report\nreporting\nmontly\n\n\n\n\n\n\n\n\n\n\n2.8.5 Images\nAdd an image of anything relevant (Section 2.6.4).\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nknitr::include_graphics(\"https://psyteachr.github.io/ads-v2/images/logos/logo.png\")\n\n\n\n\n\n\n\n\n\n\n\n\nAlternative Solution\n\nYou can add an image from the web using its URL:\n![Applied Data Skills](https://psyteachr.github.io/ads-v2/images/logos/logo.png)\nOr save an image into your project directory (e.g., in the images folder) and add it using the relative path:\n![Applied Data Skills](images/logos/logo.png)\n\n\n2.8.6 Inline R\nUse inline R to include the version of R you are using in the following sentence: “This report was created using R version 4.2.1 (2022-06-23).” You can get the version using the object R.version.string (Section 2.4.4).\n\n\nSolution\n\nThis report was created using R version 4.2.1 (2022-06-23).\n\n\n2.8.7 Knit\nKnit this document to html (Section 2.4.5).\n\n\nSolution\n\nClick on the knit button or run the following code in the console. (Do not put it the Rmd script!)\n\nrmarkdown::render(\"job.Rmd\")\n\n\n\n2.8.8 Share on Teams\nOnce you’re done, share your knitted html file and the Rmd file for the exercises on Teams in the Week 02 channel.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reports with R Markdown</span>"
    ]
  },
  {
    "objectID": "02-reports.html#sec-glossary-reports",
    "href": "02-reports.html#sec-glossary-reports",
    "title": "2  Reports with R Markdown",
    "section": "\n2.9 Glossary",
    "text": "2.9 Glossary\n\n\n\n\n\nterm\ndefinition\n\n\n\ndirectory\nA collection or \"folder\" of files on a computer.\n\n\nextension\nThe end part of a file name that tells you what type of file it is (e.g., .R or .Rmd).\n\n\nknit\nTo create an HTML, PDF, or Word document from an R Markdown (Rmd) document\n\n\nmarkdown\nA way to specify formatting, such as headers, paragraphs, lists, bolding, and links.\n\n\nproject\nA way to organise related files in RStudio\n\n\nr-markdown\nThe R-specific version of markdown: a way to specify formatting, such as headers, paragraphs, lists, bolding, and links, as well as code blocks and inline code.\n\n\nscript\nA plain-text file that contains commands in a coding language, such as R.\n\n\nworking-directory\nThe filepath where R is currently reading and writing files.\n\n\nyaml\nA structured format for information",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reports with R Markdown</span>"
    ]
  },
  {
    "objectID": "02-reports.html#sec-resources-reports",
    "href": "02-reports.html#sec-resources-reports",
    "title": "2  Reports with R Markdown",
    "section": "\n2.10 Further Resources",
    "text": "2.10 Further Resources\n\n\nR Markdown Cheat Sheet \n\nR Markdown Tutorial\n\nR Markdown: The Definitive Guide by Yihui Xie, J. J. Allaire, & Garrett Grolemund\n\nProject Structure by Danielle Navarro\n\nHow to name files by Jenny Bryan\nkableExtra\ngt\n\n\n\n\n\nXie, Y. (2021). Tinytex: Helper functions to install and maintain TeX live, and compile LaTeX documents. https://github.com/yihui/tinytex",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reports with R Markdown</span>"
    ]
  },
  {
    "objectID": "03-viz.html",
    "href": "03-viz.html",
    "title": "3  Data Visualisation",
    "section": "",
    "text": "Intended Learning Outcomes",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualisation</span>"
    ]
  },
  {
    "objectID": "03-viz.html#sec-ilo-viz",
    "href": "03-viz.html#sec-ilo-viz",
    "title": "3  Data Visualisation",
    "section": "",
    "text": "Be able to identify categorical versus continuous data\nBe able to create plots in layers using ggplot\nBe able to choose appropriate plots for data",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualisation</span>"
    ]
  },
  {
    "objectID": "03-viz.html#functions-ch03",
    "href": "03-viz.html#functions-ch03",
    "title": "3  Data Visualisation",
    "section": "\n3.1 Functions used",
    "text": "3.1 Functions used\n*aes(), as.numeric(), c(), col_character(), col_datetime(), col_double(), col_factor(), col_integer(), cols(), coord_cartesian(), count(), element_blank(), facet_wrap(), factor(), geom_bar(), geom_boxplot(), geom_col(), geom_histogram(), geom_jitter(), geom_point(), geom_smooth(), ggplot(), ggtitle(), glimpse(), guides(), mean(), now(), plot_layout(), read_csv(), rgb(), scale_fill_manual(), scale_x_continuous(), scale_x_date(), scale_x_discrete(), scale_y_continuous(), seq(), spec(), stat_summary(), theme(), theme_bw(), theme_gdocs(), theme_set(), today()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualisation</span>"
    ]
  },
  {
    "objectID": "03-viz.html#sec-walkthrough-viz",
    "href": "03-viz.html#sec-walkthrough-viz",
    "title": "3  Data Visualisation",
    "section": "Walkthrough video",
    "text": "Walkthrough video\nThere is a walkthrough video of this chapter available via Echo360. Please note that there may have been minor edits to the book since the video was recorded. Where there are differences, the book should always take precedence.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualisation</span>"
    ]
  },
  {
    "objectID": "03-viz.html#sec-setup-viz",
    "href": "03-viz.html#sec-setup-viz",
    "title": "3  Data Visualisation",
    "section": "\n3.2 Set-up",
    "text": "3.2 Set-up\nCreate a new project for the work we’ll do in this chapter:\n\nFile &gt; New Project…\nName the project 03-visualisation\n\nSave it inside your ADS directory (not inside another project)\n\nThen, create and save a new R Markdown document named plots.Rmd, get rid of the default template text, and load the packages in the set-up code chunk. You should have all of these packages installed already, but if you get the message Error in library(x) : there is no package called ‘x’, please refer to Section 1.4.1.\n\n\n```{r setup, include=FALSE}\nlibrary(tidyverse) # includes ggplot2\nlibrary(patchwork) # for multi-part plots\nlibrary(ggthemes)  # for plot themes\nlibrary(lubridate) # for manipulating dates\n```\n\n\nWe’d recommend making a new code chunk for each different activity, and using the white space to make notes on any errors you make, things you find interesting, or questions you’d like to ask the course team.\nDownload the ggplot2 cheat sheet.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualisation</span>"
    ]
  },
  {
    "objectID": "03-viz.html#variable-types",
    "href": "03-viz.html#variable-types",
    "title": "3  Data Visualisation",
    "section": "\n3.3 Variable types",
    "text": "3.3 Variable types\nIf a spreadsheet is in a tidy data format, each row is an observation, each column is a variable, and the information in each cell is a single value. We’ll learn more about how to get our data into this format in ?sec-tidy, but to get started we’ll use datasets with the right format.\nFor example, the table below lists pets owned by members of the psyTeachR team. Each row is an observation of one pet. There are 6 variables for each pet, their name, owner, species, birthdate, weight (in kg), and rating (on a 5-point scale from “very evil” to “very good”).\n\n\n\n\n\nname\nowner\nspecies\nbirthdate\nweight\nrating\n\n\n\nDarwin\nLisa\nferret\n1998-04-02\n1.2\na little evil\n\n\nOy\nLisa\nferret\nNA\n2.9\nvery good\n\n\nKhaleesi\nEmily\ncat\n2014-10-01\n4.5\nvery good\n\n\nBernie\nPhil\ndog\n2017-06-01\n32.0\nvery good\n\n\n\n\n\n\nVariables can be classified as continuous (numbers) or categorical (labels). When you’re plotting data, it’s important to know what kind of variables you have, which can help you decide what types of plots are most appropriate. Each variable also has a data type, such as numeric (numbers), character (text), or logical (TRUE/FALSE values). Some plots can only work on some data types. Make sure you have watched the mini-lecture on types of data from last week before you work through this chapter. Additionally, ?sec-data-types has more details, as this concept will be relevant repeatedly.\n\n\n\n\nData types are like the categories when you format cells in Excel.\n\n\n\n\n3.3.1 Continuous\nContinuous variables are properties you can measure, like weight. You can use continuous variables in mathematical operations, like calculating the sum total of a column of prices or the average number of social media likes per day. They may be rounded to the nearest whole number, but it should make sense to have a measurement halfway between.\nContinuous variables always have a numeric data type. They are either integers like 42 or doubles like 3.14159.\n\n3.3.2 Categorical\nCategorical variables are properties you can count, like the species of pet. Categorical variables can be &lt;a href=‘https://psyteachr.github.io/glossary/n#nominal’ target=’_blank’ class=‘glossary’ title=‘Categorical variables that don’t have an inherent order, such as types of animal.’&gt;nominal, where the categories don’t really have an order, like cats, dogs and ferrets (even though ferrets are obviously best), or ordinal, where they have a clear order but the distance between the categories isn’t something you could exactly equate, like points on a Likert rating scale. Even if a data table uses numbers like 1-7 to represent ordinal variables, you shouldn’t treat them like continuous variables.\nCategorical data can have a character data type, also called strings. These are made by putting text inside of quotes. That text can be letters, punctuation, or even numbers. For example, \"January\" is a character string, but so is \"1\" if you put it in quotes. The character data type is best for variables that can have a lot of different values that you can’t predict ahead of time.\nCategorical data can also be factors, a specific type of integer that lets you specify the category names and their order. This is useful for making plots display with categories in the order you want (otherwise they default to alphabetical order). The factor data type is best for categories that have a specific number of levels.\n\n\n\n\n\n\nDo not factor numbers\n\n\n\nIf you factor numeric data, it gets converted to the integers 1 to the number of unique values, no matter what the values are. Additionally, you can no longer use the values as numbers, such as calculating the mean.\n\n\n\nExample\n\nx &lt;- c(-3, 0, .5)  # numeric vector\nf &lt;- factor(x)     # convert to factor\nx == as.numeric(f) # does not convert back to numeric \n\n\n[1] FALSE FALSE FALSE\n\n\n\n\n\nYou cannot average a factor\n\nm &lt;- mean(f)\n\n\nWarning in mean.default(f): argument is not numeric or logical: returning NA\n\n\n\n\nSometimes people represent categorical variables with numbers that correspond to names, like 0 = “no” and 1 = “yes”, but values in between don’t have a clear interpretation. If you have control over how the data are recorded, it’s better to use the character names for clarity. You’ll learn how to recode columns in ?sec-wrangle.\n\n3.3.3 Dates and times\nDates and times are a special case of variable. They can act like categorical or continuous variables, and there are special ways to plot them. Dates and times can be hard to work with, but the [lubridate(https://lubridate.tidyverse.org/) package provides functions to help you with this.\n\n# the current date\nlubridate::today()\n\n[1] \"2024-03-20\"\n\n\n\n# the current date and time in the GMT timezone\nlubridate::now(tzone = \"GMT\")\n\n[1] \"2024-03-20 14:40:17 GMT\"\n\n\n\n\n\n\n\n\nTest your understanding\n\n\n\nComing back to the pets dataset, what type of variable is in each column? You can use the function glimpse() to show a list of the column names, their data types, and the first few values in each column - here is the output of running glimpse() on the pets dataset.\n\nglimpse(pets)\n\nRows: 4\nColumns: 6\n$ name      &lt;chr&gt; \"Darwin\", \"Oy\", \"Khaleesi\", \"Bernie\"\n$ owner     &lt;chr&gt; \"Lisa\", \"Lisa\", \"Emily\", \"Phil\"\n$ species   &lt;fct&gt; ferret, ferret, cat, dog\n$ birthdate &lt;date&gt; 1998-04-02, NA, 2014-10-01, 2017-06-01\n$ weight    &lt;dbl&gt; 1.2, 2.9, 4.5, 32.0\n$ rating    &lt;fct&gt; a little evil, very good, very good, very good\n\n\n\n\n\n\n\n\n\nColumn\nVariable type\nData type\n\n\n\nname\n\ncontinuous\nnominal\nordinal\ndate\n\nnumeric\ncharacter\nfactor\ndate\n\n\nowner\n\ncontinuous\nnominal\nordinal\ndate\n\nnumeric\ncharacter\nfactor\ndate\n\n\nspecies\n\ncontinuous\nnominal\nordinal\ndate\n\nnumeric\ncharacter\nfactor\ndate\n\n\nbirthdate\n\ncontinuous\nnominal\nordinal\ndate\n\ncontinuous\nnominal\nordinal\ndate\n\n\nweight\n\ncontinuous\nnominal\nordinal\ndate\n\nnumeric\ncharacter\nfactor\ndate\n\n\nrating\n\ncontinuous\nnominal\nordinal\ndate\n\nnumeric\ncharacter\nfactor\ndate",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualisation</span>"
    ]
  },
  {
    "objectID": "03-viz.html#building-plots",
    "href": "03-viz.html#building-plots",
    "title": "3  Data Visualisation",
    "section": "\n3.4 Building plots",
    "text": "3.4 Building plots\nThere are multiple approaches to data visualisation in R; in this course we will use the popular package ggplot2, which is part of the larger tidyverse collection of packages. A grammar of graphics (the “gg” in “ggplot”) is a standardised way to describe the components of a graphic. ggplot2 uses a layered grammar of graphics, in which plots are built up in a series of layers. It may be helpful to think about any picture as having multiple elements that sit semi-transparently over each other. A good analogy is old Disney movies where artists would create a background and then add moveable elements on top of the background via transparencies.\nFigure 3.1 displays the evolution of a simple scatterplot using this layered approach. First, the plot space is built (layer 1); the variables are specified (layer 2); the type of visualisation (known as a geom) that is desired for these variables is specified (layer 3) - in this case geom_point() is called to visualise individual data points; a second geom is added to include a line of best fit (layer 4), the axis labels are edited for readability (layer 5), and finally, a theme is applied to change the overall appearance of the plot (layer 6).\n\n\n\n\n\n\n\nFigure 3.1: Evolution of a layered plot\n\n\n\n\nImportantly, each layer is independent and independently customisable. For example, the size, colour and position of each component can be adjusted, or one could, for example, remove the first geom (the data points) to only visualise the line of best fit, simply by removing the layer that draws the data points (Figure 3.2). The use of layers makes it easy to build up complex plots step-by-step, and to adapt or extend plots from existing code.\n\n\n\n\n\n\n\nFigure 3.2: Final plot with scatterplot layer removed.\n\n\n\n\n\n3.4.1 Plot Data\nLet’s build up the plot above, layer by layer. First we need to get the data. We’ll learn how to load data from different sources in ?sec-data, but this time we’ll use the same method as we did in Section 2.5.1 and load it from an online source.\nWhen you load the data, read_csv() will produce a message that gives you information about the data it has imported and what assumptions it has made. The “column specification” tells you what each column is named and what type of data R has categorised each variable as. The abbreviation “chr” is for character columns, “dbl” is for double columns, and “dttm” is a date/time column.\n\nsurvey_data &lt;- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n\nRows: 707 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): caller_id, employee_id, issue_category\ndbl  (3): wait_time, call_time, satisfaction\ndttm (1): call_start\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThis data is simulated data for a call centre customer satisfaction survey. The first thing you should do when you need to plot data is to get familiar with what all of the rows (observations) and columns (variables) mean. Sometimes this is obvious, and sometimes it requires help from the data provider. Here, each row represents one call to the centre.\n\n\ncaller_id is a unique ID for each caller\n\nemployee_id is a unique ID for each employee taking calls\n\ncall_start is the date and time that the call arrived\n\nwait_time is the number of seconds the caller had to wait\n\ncall_time is the number of seconds the call lasted after the employee picked up\n\nissue_category is whether the issue was tech, sales, returns, or other\n\nsatisfaction is the customer satisfaction rating on a scale from 1 (very unsatisfied) to 5 (very satisfied)\n\nUnless you specify the column types, data importing functions will just guess the types and usually default to double for columns with numbers and character for columns with letters. Use the function spec() to find out all of the column types and edit them if needed.\n\nspec(survey_data)\n\ncols(\n  caller_id = col_character(),\n  employee_id = col_character(),\n  call_start = col_datetime(format = \"\"),\n  wait_time = col_double(),\n  call_time = col_double(),\n  issue_category = col_character(),\n  satisfaction = col_double()\n)\n\n\nLet’s set issue_category as a factor and set the order of the levels. By default, R will order the levels of a factor alphanumerically, however in many cases you will want or need to set your own order. For example, in this data, it makes most sense for the category “other” to come at the end of the list. After you update the column types, you have to re-import the data by adjusting the read_csv() code to set the col_types argument to the new column types.\n\n\n\n\n\n\nDefine objects before you use them\n\n\n\nBecause read_csv() is going to use the object survey_col_types, you must create survey_col_types before you run the adjusted read_csv() code. If you ever need to adjust your code, try to think about the order that the code will run in if you start from scratch and make sure it’s organised appropriately.\n\n\n\n# updated column types\nsurvey_col_types &lt;- cols(\n  caller_id = col_character(),\n  employee_id = col_character(),\n  call_start = col_datetime(format = \"\"),\n  wait_time = col_double(),\n  call_time = col_double(),\n  issue_category = col_factor(levels = c(\"tech\", \"sales\", \"returns\", \"other\")),\n  satisfaction = col_integer()\n)\n\n# re-import data with correct column  types\nsurvey_data &lt;- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\",\n                        col_types = survey_col_types)\n\n\n3.4.2 Plot setup\n\n3.4.2.1 Default theme\nPlots in this book use the black-and-white theme, not the default grey theme, so set your default theme to the same so your plots will look like the examples below. At the top of your script, in the setup chunk after you’ve loaded the tidyverse package, add the following code and run it. You’ll learn more ways to customise your theme in Section 3.4.3.4 and ?sec-themes-appendix.\n\ntheme_set(theme_bw()) # set the default theme\n\n\n3.4.2.2 Data\nEvery plot starts with the ggplot() function and a data table. If your data are not loaded or you have a typo in your code, this will give you an error message. It’s best to check your plot after each step, so that you can figure out where errors are more easily.\n\nggplot(data = survey_data)\n\n\n\n\n\n\nFigure 3.3: A blank ggplot.\n\n\n\n\n\n3.4.2.3 Mapping\nThe next argument to ggplot() is the mapping. This tells the plot which columns in the data should be represented by, or “mapped” to, different aspects of the plot, such as the x-axis, y-axis, line colour, object fill, or line style. These aspects, or “aesthetics”, are listed inside the aes() function.\nSet the arguments x and y to the names of the columns you want to be plotted on those axes. Here, we want to plot the wait time on the x-axis and the call time on the y-axis.\n\n# set up the plot with mapping\nggplot(\n  data = survey_data, \n  mapping = aes(x = wait_time, y = call_time)\n)\n\n\n\n\n\n\nFigure 3.4: A blank plot with x- and y- axes mapped.\n\n\n\n\n\n\n\n\n\n\nggplot argument names\n\n\n\nIn the example above, we wrote out the names of the arguments data and mapping, but in practice, almost everyone omits them. Just make sure you put the data and mapping in the right order.\n\nggplot(survey_data,  aes(x = wait_time, y = call_time))\n\n\n\n\n3.4.2.4 Geoms\nNow we can add our plot elements in layers. These are referred to as geoms and their functions start with geom_. You add layers onto the base plot created by ggplot() with a plus (+).\n\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point() # scatterplot\n\n\n\n\n\n\nFigure 3.5: Adding a scatterplot with geom_point().\n\n\n\n\n\n\n\n\n\n\nLocation of the +\n\n\n\n\n\nSomewhat annoyingly, the plus has to be on the end of the previous line, not at the start of the next line. If you do make this mistake, it will run the first line of code to produce the base layer but then you will get the following error message rather than adding on geom_point().\n\nggplot(survey_data, aes(x = wait_time, y = call_time))\n\n\n\n\n\n\n+ geom_point() # scatterplot\n\nError:\n! Cannot use `+` with a single argument\nℹ Did you accidentally put `+` on a new line?\n\n\n\n\n\n\n3.4.2.5 Multiple geoms\nPart of the power of ggplot2 is that you can add more than one geom to a plot by adding on extra layers and so it quickly becomes possible to make complex and informative visualisation. Importantly, the layers display in the order you set them up. The code below uses the same geoms to produce a scatterplot with a line of best fit, but orders them differently.\n\n# Points first\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point() + # scatterplot\n  geom_smooth(method = lm) # line of best fit\n\n# Line first\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_smooth(method = lm) + # line of best fit\n  geom_point() # scatterplot\n\n\n\n\n\n\n\n\nFigure 3.6: Points first versus line first.\n\n\n\n\n\n3.4.2.6 Saving plots\nJust like you can save numbers and data tables to objects, you can also save the output of ggplot(). The code below produces the same plots we created above but saves them to objects named point_first and line_first. If you run just this code, the plots won’t display like they have done before. Instead, you’ll see the object names appear in the environment pane.\n\npoint_first &lt;- \n  ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point() + # scatterplot\n  geom_smooth(method = lm) # line of best fit\n  \nline_first &lt;-\n  ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_smooth(method = lm) + # line of best fit\n  geom_point() # scatterplot\n\nTo view the plots, call the objects by name. This will output each plot separately.\n\npoint_first # view first plot\nline_first # view second plot\n\n\n3.4.2.7 Combining plots\nOne of the reasons to save your plots to objects is so that you can combine multiple plots using functions from the patchwork package. The below code produces the above plot by combining the two plots with + and then specifying that we want the plots produced on a single row with the nrow argument in plot_layout().\n\n# add plots together in 1 row\npoint_first + line_first + plot_layout(nrow = 1)\n\n\n\n\n\n\nFigure 3.7: Combining plots with patchwork.\n\n\n\n\n\n\n\n\n\n\nTry changing nrow to 2\n\n\n\n\n\n\n\n3.4.3 Customising plots\nThere are nearly endless ways to customise ggplots. We’ll cover a few of the basic customisations here.\n\n3.4.3.1 Styling geoms\nWe should definitely put the line in front of the points, but the points are still a bit dark. If you want to change the overall style of a geom, you can set the arguments colour, alpha, shape, size and linetype inside the geom function. There are many different values that you can set these to; ?sec-plotstyle) gives details of these. Play around with different values below and figure out what the default values are for shape and size.\n\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2, # 20% transparency\n             shape = 18,  # solid diamond\n             size = 2) + \n  geom_smooth(method = lm, \n              formula = y~x, # formula used to draw line, \n              # setting method & formula avoids an annoying message\n              colour = rgb(0, .5, .8),\n              linetype = 3) \n\n\n\n\n\n\nFigure 3.8: Changing geom styles.\n\n\n\n\n\n\n\n\n\n\nSetting aesthetics overall versus by category\n\n\n\nThis method is only for changing the style of all the shapes made with that geom. If you want, for example, points to have different colours depending on which issue category they are from, you set the argument colour = issue_category inside the aes() function for the mapping. You can customise the colours used with scale_ functions, which you will learn about below and in ?sec-plotstyle).\n\n\n\n3.4.3.2 Format axes\nNow we need to make the axes look neater. There are several functions you can use to change the axis labels, but the most powerful ones are the scale_ functions. You need to use a scale function that matches the data you’re plotting on that axis and this is where it becomes particularly important to know what type of data you’re working with. Both of the axes here are continuous, so we’ll use scale_x_continuous() and scale_y_continuous().\nThe name argument changes the axis label. The breaks argument sets the major units and needs a vector of possible values, which can extend beyond the range of the data (e.g., wait time only goes up to 350, but we can specify breaks up to 600 to make the maths easier or anticipate updates to the data). The seq() function creates a sequence of numbers from one to another by specified steps.\n\n\n\nExample of seq()\n\nseq(from = 0, to = 600, by = 60)\n\n\n [1]   0  60 120 180 240 300 360 420 480 540 600\n\n\n\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  # customise axis labels and breaks\n  scale_x_continuous(name = \"Wait Time (seconds)\", \n                     breaks = seq(from = 0, to = 600, by = 60)) +\n  scale_y_continuous(name = \"Call time (seconds)\",\n                     breaks = seq(from = 0, to = 600, by = 30))\n\n\n\n\n\n\nFigure 3.9: Formatting plot axes with scale_ functions.\n\n\n\n\n\n\n\n\n\n\nMinor breaks\n\n\n\nCheck the help for ?scale_x_continuous to see how you would set the minor units or specify how many breaks you want instead.\n\n\n\n3.4.3.3 Axis limits\nIf you want to change the minimum and maximum values on an axis, use the coord_cartesian() function. Many plots make more sense if the minimum and maximum values represent the range of possible values, even if those values aren’t present in the data. Here, wait and call times can’t be less than 0 seconds, so we’ll set the minimum values to 0 and the maximum values to the first break above the highest value.\n\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wait Time (seconds)\", \n                     breaks = seq(from = 0, to = 600, by = 60)) +\n  scale_y_continuous(name = \"Call time (seconds)\",\n                     breaks = seq(from = 0, to = 600, by = 30)) +\n  # set axis limits\n  coord_cartesian(xlim = c(0, 360), \n                  ylim = c(0, 180))\n\n\n\n\n\n\nFigure 3.10: Changing the axis limits.\n\n\n\n\n\n\n\n\n\n\nSetting limits with the scale_ function\n\n\n\nYou can also set the limits argument inside the scale_ functions, but this actually removes any data that falls outside these limits, rather than cropping your plot, and this can change the appearance of certain types of plots like violin plots and density plots.\n\n\n\n3.4.3.4 Themes\nggplot2 comes with several built-in themes, such as theme_minimal() and theme_bw(), but the ggthemes package provides even more themes to match different software, such as GoogleDocs or Stata, or publications, such as the Economist or the Wall Street Journal. Let’s add the GoogleDocs theme, but change the font size to 20 with the base_size argument.\nIt’s also worth highlighting that this code is starting to look quite complicated because of the number of layers, but because we’ve built it up slowly it should (hopefully!) make sense. If you see examples of ggplot2 code online that you’d like to adapt, build the plot up layer by layer and it will make it easier to understand what each layer adds.\n\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wait Time (seconds)\", \n                     breaks = seq(from = 0, to = 600, by = 60)) +\n  scale_y_continuous(name = \"Call time (seconds)\",\n                     breaks = seq(from = 0, to = 600, by = 30)) +\n  coord_cartesian(xlim = c(0, 360), \n                  ylim = c(0, 180)) +\n  # change the theme\n  ggthemes::theme_gdocs(base_size = 20)\n\n\n\n\n\n\nFigure 3.11: Changing the theme to the Google Docs style.\n\n\n\n\n\n3.4.3.5 Theme tweaks\nIf you’re still not quite happy with a theme, you can customise it even further with the themes() function. Check the help for this function to see all of the possible options. The most common thing you’ll want to do is to remove an element entirely. You do this by setting the relevant argument to element_blank(). Below, we’re getting rid of the x-axis line and the plot background, which removes the line around the plot.\n\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wait Time (seconds)\", \n                     breaks = seq(from = 0, to = 600, by = 60)) +\n  scale_y_continuous(name = \"Call time (seconds)\",\n                     breaks = seq(from = 0, to = 600, by = 30)) +\n  coord_cartesian(xlim = c(0, 360), \n                  ylim = c(0, 180)) +\n  theme_gdocs(base_size = 11) +\n  # customise theme elements\n  theme(axis.line.x = element_blank(),\n        plot.background = element_blank())\n\n\n\n\n\n\nFigure 3.12: Customising the theme to remove the x-axis line and background outline.\n\n\n\n\n\n3.4.4 Figure captions\nYou can add a caption directly to the image using the labs() function, which also allows you to add or edit the title, subtitle, and axis labels.\n\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wait Time (seconds)\", \n                     breaks = seq(from = 0, to = 600, by = 60)) +\n  scale_y_continuous(name = \"Call time (seconds)\",\n                     breaks = seq(from = 0, to = 600, by = 30)) +\n  coord_cartesian(xlim = c(0, 360), \n                  ylim = c(0, 180)) +\n  theme_gdocs(base_size = 11) +\n  theme(axis.line.x = element_blank(),\n        plot.background = element_blank()) +\n  labs(title = \"The relationship between wait time and call time\",\n       subtitle = \"2020 Call Data\",\n       caption = \"Figure 1. As wait time increases, call time increases.\")\n\n\n\n\n\n\nFigure 3.13: Adding a title, subtitle, and caption.\n\n\n\n\nHowever, it is more accessible to include this sort of information in plain text for screen readers. You can add a text caption in the chunk header, and some document types will even automatically number figures for you (you’ll learn about this in ?sec-linked-docs). You can also add alt-text descriptions for screen readers that describe the image.\n\n\n```{r fig-wait-vs-call, fig.cap=\"As wait time increases, call time increases.\", fig.alt=\"A scatterplot showing wait time on the x-axis (range 0-360 seconds) and call time on the y-axis (range 0-180 seconds) with a trend line showing that as wait time increases, call time increases from about 60 wait/30 call to about 300 wait/65 call.\"}\n# figure code here\n```",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualisation</span>"
    ]
  },
  {
    "objectID": "03-viz.html#appropriate-plots",
    "href": "03-viz.html#appropriate-plots",
    "title": "3  Data Visualisation",
    "section": "\n3.5 Appropriate plots",
    "text": "3.5 Appropriate plots\nNow that you know how to build up a plot by layers and customise its appearance, you’re ready to learn about some more plot types. Different types of data require different types of plots, so this section is organised by data type.\nThe ggplot2 cheat sheet is a great resource to help you find plots appropriate to your data, based on how many variables you’re plotting and what type they are. The examples below all use the same customer satisfaction data, but each plot communicates something different.\nWe don’t expect you to memorise all of the plot types or the methods for customising them, but it will be helpful to try out the code in the examples below for yourself, changing values to test your understanding.\n\n3.5.1 Counting categories\n\n3.5.1.1 Bar plot\nIf you want to count the number of things per category, you can use geom_bar(). You only need to provide a x mapping to geom_bar() because by default geom_bar() uses the number of observations in each group of x as the value for y, so you don’t need to tell it what to put on the y-axis.\n\nggplot(survey_data, aes(x = issue_category)) +\n  geom_bar()\n\n\n\n\n\n\nFigure 3.14: A basic bar plot.\n\n\n\n\n\n\n\n\n\n\nCustomising bar plot appearance\n\n\n\nYou probably want to customise some things, like the colours, order of the columns, and their labels. Inspect the code below and try running it layer by layer to figure out where these things change. The functions scale_fill_manual() and scale_x_discrete() are new, but work in the same way as the other scale_ functions. You’ll learn more about this in ?sec-custom-viz.\n\n\n\n\n\n\n\nCode\n\n\n\n\n\nggplot(survey_data, aes(x = issue_category, \n                        fill = issue_category)) +\n  geom_bar() +\n  scale_x_discrete(\n    # change axis title\n    name = \"Issue Category\", \n    # change order\n    limits = c(\"tech\", \"returns\", \"sales\", \"other\"), \n    # change labels\n    labels = c(\"Technical\", \"Returns\", \"Sales\", \"Other\") \n  ) +\n  scale_fill_manual(\n    # change colours\n    values = c(tech = \"goldenrod\", \n                returns = \"darkgreen\", \n                sales = \"dodgerblue3\", \n                other = \"purple3\"),\n    # remove the legend\n    guide = \"none\" \n  ) +\n  scale_y_continuous(\n    name = \"\", # remove axis title\n    # remove the space above and below the y-axis\n    expand = expansion(add = 0)\n  ) +\n  # minimum = 0, maximum = 350\n  coord_cartesian(ylim = c(0, 350)) + \n  ggtitle(\"Number of issues per category\") # add a title\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.5.1.2 Column plot\nIf your data already have a column with the number you want to plot, you can use geom_col() to plot it. We can use the count() function to make a table with a row for each issue_category and a column called n with the number of observations in that category.\n\ncount_data &lt;- count(survey_data, issue_category)\n\n\n\nissue_category\nn\n\n\n\ntech\n311\n\n\nsales\n88\n\n\nreturns\n232\n\n\nother\n76\n\n\n\nThe mapping for geom_col() requires you to set both the x and y aesthetics. Set y = n because we want to plot the number of issues in each category, and that information is in the column called n.\n\nggplot(count_data, aes(x = issue_category, y = n)) +\n  geom_col()\n\n\n\n\n\n\nFigure 3.15: A basic column plot.\n\n\n\n\n\n3.5.1.3 Pie chart\nPie charts are a misleading form of data visualisation, so we won’t cover them. We’ll cover options for visualising proportions, like waffle, lollipop and treemap plots, in ?sec-other-plots.\n\n\n\n\n\n\nTest your understanding\n\n\n\nHere is a small data table.\n\n\ncountry\npopulation\nisland\n\n\n\nNorthern Ireland\n1,895,510\nIreland\n\n\nWales\n3,169,586\nGreat Britain\n\n\nRepublic of Ireland\n4,937,786\nIreland\n\n\nScotland\n5,466,000\nGreat Britain\n\n\nEngland\n56,550,138\nGreat Britain\n\n\n\n\nWhat geom would you use to plot the population for each of the 5 countries? \ngeom_bar\ngeom_col\n\n\n\n\nWhat mapping would you use?\n\naes(x = country, y = population)aes(x = population, y = country)aes(x = country)aes(x = island)aes(y = population)\n\n\n\n\n\nWhat geom would you use to plot the number of countries on each island? \ngeom_bar\ngeom_col\n\n\n\n\nWhat mapping would you use?\n\naes(x = country, y = population)aes(x = population, y = country)aes(x = country)aes(x = island)aes(y = population)\n\n\n\n\n\n\n\n3.5.2 One continuous variable\nIf you have a continuous variable, like the number of seconds callers have to wait, you can use geom_histogram() to show the distribution. Just like geom_bar() you are only required to specify the x variable.\nA histogram splits the data into “bins” along the x-axis and shows the count of how many observations are in each bin along the y-axis.\n\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\nFigure 3.16: Histogram of wait times.\n\n\n\n\nYou should always set the binwidth or number of bins to something meaningful for your data (otherwise you get the annoying message above). You might need to try a few options before you find something that looks good and conveys the meaning of your plot – try changing the values of binwidth and bins below to see what works best.\n\n# adjust width of each bar\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram(binwidth = 30)\n\n# adjust number of bars\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram(bins = 5)\n\nBy default, the bars start centered on 0, so if binwidth is set to 30, the first bar would include -15 to 15 seconds, which doesn’t make much sense. We can set boundary = 0 so that each bar represents increments of 30 seconds starting from 0.\n\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram(binwidth = 30, boundary = 0)\n\n\n\n\n\n\nFigure 3.17: A histogram with the boundary set to 0.\n\n\n\n\nFinally, the default style of grey bars is ugly, so you can change that by setting the fill and colour, as well as using scale_x_continuous() to update the axis labels.\n\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram(binwidth = 15, \n                 boundary = 0, \n                 fill = \"white\", \n                 color = \"black\") +\n  scale_x_continuous(name = \"Wait time (seconds)\",\n                     breaks = seq(0, 600, 60))\n\n\n\n\n\n\nFigure 3.18: Histogram with custom styles.\n\n\n\n\n\n\n\n\n\n\nTest your understanding\n\n\n\nImagine you have a table of the population for each country in the world with the columns country and population. We’ll just look at the 76 countries with populations of less than a million.\n\n\n\n\n\n\n\n\n\n\nHow would you set the mapping for this plot?\n\naes(x = country, y = population)aes(x = population, y = country)aes(x = population)aes(x = population, y = count)\n\n\n\n\n\nWhat is the binwidth of the histogram? \n1\n100\n100K\n1M\n\n\n\n\n\n\n\n\n\n\nAxis label customisation\n\n\n\n\n\nIf you’re curious how we got the x-axis labels to read “100K” instead of “100000”, you just need to add a vector of labels the same length as breaks.\n\n  scale_x_continuous(breaks = seq(0, 1e6, 1e5),\n                     labels = c(paste0(0:9*100, \"K\"), \"1M\"))\n\n\n\n\n\n3.5.3 Grouped continuous variables\nThere are several ways to compare continuous data across groups. Which you choose depends on what point you are trying to make with the plot.\n\n3.5.3.1 Stacked histogram\nIn previous plots, we have used fill purely for visual reasons, e.g., we changed the colour of the histogram bars to make them look nicer. However, you can also use fill to represent another variable so that the colours become meaningful.\nSetting the fill aesthetic in the mapping will produce different coloured bars for each category of the fill variable, in this case issue_category.\n\nggplot(survey_data, aes(x = wait_time, fill = issue_category)) +\n  geom_histogram(boundary = 0, \n                 binwidth = 15,\n                 color = \"black\")\n\n\n\nHistogram with categories represented by fill.\n\n\n\n\n\n\n\n\n\nArguments inside aes()\n\n\n\nWhen you set an aspect to represent the data, you do this inside the aes() function for the mapping, not as an argument to the geom. If you try to set this in a geom, you’ll get the following error (unless you coincidentally have an object named issue_category that is a colour word).\n\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram(boundary = 0, \n                 binwidth = 15, \n                 color = \"black\",\n                 fill = issue_category)\n\nError in list2(binwidth = binwidth, bins = bins, na.rm = na.rm, orientation = orientation, : object 'issue_category' not found\n\n\n\n\n\n\n\n\n\n\nArea plot alternative\n\n\n\n\n\nThe function geom_area() gives a similar effect when stat = \"bin\".\n\n# area plot\nggplot(survey_data, mapping = aes(x = wait_time, fill = issue_category)) +\n  geom_area(stat = \"bin\", \n            boundary = 0, \n            binwidth = 15, \n            color = \"black\")\n\n\n\nStacked area plot.\n\n\n\n\n\n\n\n3.5.3.2 Dodged histogram\nBy default, the categories are positioned stacked on top of each other. If you want to compare more than one distribution, you can set the position argument of geom_histogram() to “dodge” to put the bars for each group next to each other instead of stacking them. However, this can look confusing with several categories.\n\n# dodged histogram\nggplot(survey_data, aes(x = wait_time, \n                        fill = issue_category,\n                        colour = issue_category))+\n  geom_histogram(boundary = 0, \n                 binwidth = 15, \n                 position = \"dodge\") +\n  scale_x_continuous(name = \"Wait time (seconds)\",\n                     breaks = seq(0, 600, 60))\n\n\n\n\n\n\nFigure 3.19: A histogram with multiple groups.\n\n\n\n\n\n\n\n\n\n\nFrequency plot alternative\n\n\n\n\n\nAlternatively, you can use geom_freqpoly() to plot a line connecting the top of each bin (see ?sec-freqpoly).\n\n# frequency plot\nggplot(survey_data, aes(x = wait_time,\n                        colour = issue_category)) +\n  geom_freqpoly(binwidth = 15, \n                boundary = 0,\n                size = 1) +\n  scale_x_continuous(name = \"Wait time (seconds)\",\n                     breaks = seq(0, 600, 60))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\nFigure 3.20: A frequency plot with multiple groups.\n\n\n\n\n\n\n\n\n3.5.3.3 Violin plot\nAnother way to compare groups of continuous variables is the violin plot. This is like a density plot, but rotated 90 degrees and mirrored - the fatter the violin, the larger proportion of data points there are at that value.\n\nviolin_area &lt;- \n  ggplot(survey_data, aes(x = issue_category, y = wait_time)) +\n  geom_violin() +\n  ggtitle('scale = \"area\"')\n\nviolin_count &lt;- \n  ggplot(survey_data, aes(x = issue_category, y = wait_time)) +\n  geom_violin(scale = \"count\") +\n  ggtitle('scale = \"count\"')\n\nviolin_area + violin_count\n\n\n\n\n\n\nFigure 3.21: The default violin plot gives each shape the same area. Set scale=‘count’ to make the size proportional to the number of observations.\n\n\n\n\n\n3.5.3.4 Boxplot\nBoxplots serve a similar purpose to violin plots (without the giggles from the back row). They don’t show you the shape of the distribution, but rather some statistics about it. The middle line represents the median; half the data are above this line and half below it. The box encloses the 25th to 75th percentiles of the data, so 50% of the data falls inside the box. The “whiskers” extending above and below the box extend 1.5 times the height of the box, although you can change this with the coef argument. The points show outliers – individual data points that fall outside of this range.\nBoxplots can be horizontal if you swap to x and y columns, and there are many other customisations you can apply.\n\nboxplot &lt;- ggplot(survey_data, aes(x = issue_category, y = wait_time)) +\n geom_boxplot() +\n  ggtitle(\"Default vertical boxplot\")\n\ncustom &lt;- ggplot(survey_data, aes(y = issue_category,x = wait_time)) +\n geom_boxplot(fill = \"grey80\", \n              outlier.colour = \"red\",\n              outlier.shape = 8,\n              coef = 1,   # length of whiskers relative to box\n              varwidth = TRUE, # set width proportional to sample size\n              notch = TRUE) +\n  ggtitle(\"Customised horizontal boxplot\")\n\nboxplot + custom\n\n\n\n\n\n\nFigure 3.22: Boxplots.\n\n\n\n\n\n3.5.3.5 Combo plots\nViolin plots are frequently layered with other geoms that represent the mean or median values in the data. This is a lot of code; to help your understanding, run it layer by layer to see how it builds up and change the values throughout the code.\n\n# add fill and colour to the mapping\n\nggplot(survey_data,  aes(x = issue_category, \n                         y = wait_time,\n                         fill = issue_category,\n                         colour = issue_category)) +\n  scale_x_discrete(name = \"Issue Category\") +\n  scale_y_continuous(name = \"Wait Time (seconds)\",\n                     breaks = seq(0, 600, 60)) +\n  coord_cartesian(ylim = c(0, 360)) +\n  guides(fill = \"none\", colour = \"none\") + \n  # add a violin plot\n  geom_violin(draw_quantiles = 0.5, # adds a line at median (50%) score\n              alpha = 0.4) + \n  # add a boxplot\n  geom_boxplot(width = 0.25, \n               fill = \"white\", \n               alpha = 0.75, \n               fatten = 0, # removes the median line\n               outlier.alpha = 0) + \n  # add a point that represents the mean\n  stat_summary(fun = mean, \n               geom = \"point\", \n               size = 2) + \n  ggtitle(\"ViolinBox\")\n\n\n\n\n\n\nFigure 3.23: Violin plots combined with different methods to represent means and medians.\n\n\n\n\n\n\n\n\n\n\nMisleading Bar Charts\n\n\n\n\n\nA very common type of plot is to produce a bar chart of means, however, the example below demonstrates just how misleading this is. It communicates the mean value for each category, but the bars hide the distribution of the actual data. You can’t tell if most wait times are close to 3 minutes, or spread from 0 to 6 minutes, or if the vast majority are less than 2 minutes, but the mean is pulled up by some very high outliers.\nColumn plots can also be very misleading. The plot on the left starts the y-axis at 0, which makes the bar heights proportional, showing almost no difference in average wait times. Since the differences are hard to see, you may be tempted to start the y-axis higher, but that makes it look like the average wait time for returns is double that for tech.\n\n\n\n\n\n\n\nFigure 3.24: Don’t plot continuous data with column plots. They are only appropriate for count data.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest your understanding\n\n\n\n\n\n\n\n\n\n\n\n\nHow would you create plot A? \ngeom_box()\ngeom_boxplot()\ngeom_violin()\ngeom_violinplot()\n\nHow would you create plot B? \ngeom_box()\ngeom_boxplot()\ngeom_violin()\ngeom_violinplot()\n\nWhat does the mapping look like for both plots?\n\naes(x = employee_id, y = call_time, colour = call_time)aes(x = employee_id, y = call_time, fill = employee_id)aes(x = employee_id, y = call_time, colour = employee_id)aes(x = employee_id, y = call_time, fill = call_time)\n\n\nWhich employee has the longest median call time? \ne01\ne02\ne03\ne04\ne05\ne06\ne07\ne08\ne09\ne10\n\nWhich employee has the record longest call? \ne01\ne02\ne03\ne04\ne05\ne06\ne07\ne08\ne09\ne10\n\n\n\n\n\n3.5.4 Two continuous variables\nWhen you want to see how two continuous variables are related, set one as the x-axis and the other as the y-axis. Usually, if one variable causes the other, you plot the cause on the x-axis and the effect on the y-axis. Here, we want to see if longer wait times cause the calls to be longer.\n\n3.5.4.1 Scatterplot\nThe function to create a scatterplot is called geom_point().\n\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point()\n\n\n\n\n\n\nFigure 3.25: Scatterplot with geom_point().\n\n\n\n\n\n3.5.4.2 Trendlines\nIn Figure 3.1, we emphasised the relationship between wait time and call time with a trendline created by geom_smooth() using the argument method = lm (“lm” stands for “linear model” or a straight line relationship). You can also set method = loess to visualise a non-linear relationship.\n\nlm_plot &lt;- \n  ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(alpha = 0.2) +\n  geom_smooth(method = lm, formula = y~x) +\n  ggtitle(\"method = lm\")\n\nloess_plot &lt;- \n  ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(alpha = 0.2) +\n  geom_smooth(method = loess, formula = y~x) +\n  ggtitle(\"method = loess\")\n\nlm_plot + loess_plot\n\n\n\n\n\n\nFigure 3.26: Different ways to show the relationship between two continuous variables.\n\n\n\n\n\n\n\n\n\n\nError shading\n\n\n\nIf there isn’t much data at the extremes of the x-axis, the curve can be very uncertain. This is represented by the wider shaded area, which means that the true relationship might be anywhere within that area. Add the argument se = FALSE to geom_smooth() to remove this “standard error” shading.\n\n\n\n3.5.4.3 Dates\nThe call_start column contains both a date and a time, so use the date() function from lubridate to convert it to just a date. We’ll need it in this format to be able to transform the x-axis below.\n\nggplot(survey_data, aes(x = lubridate::date(call_start), \n                        y = satisfaction)) + \n  geom_smooth(method = lm, formula = y~x)\n\n\n\n\n\n\nFigure 3.27: Plotting dates.\n\n\n\n\nWe can use scale_x_date() to set the date_breaks to be “1 month” apart. The date_labels argument uses a code for different date formats; you can see the full list of possibilities in the help for ?strptime. For example, %b means “Abbreviated month name”, whilst if you wanted to use a format like “2020/01/31” you could try \"%Y/%m/%d\".\n\nggplot(survey_data, aes(x = lubridate::date(call_start), \n                        y = satisfaction)) +\n  geom_smooth(method = lm, formula = y~x) +\n  scale_x_date(name = \"\",\n               date_breaks = \"1 month\", \n               date_labels = \"%b\") +\n  scale_y_continuous(name = \"Caller Satisfaction\") +\n  ggtitle(\"2020 Caller Satisfaction\")\n\n\n\n\n\n\nFigure 3.28: Plotting dates with breaks one month apart.\n\n\n\n\n\n\n\n\n\n\nTest yourself\n\n\n\nIt looks like customer satisfaction declined across the year, but is this change meaningful? See what the plot looks like when the y-axis spans the full range of possible satisfaction values from 1 to 5. You can also plot the individual data points to emphasise the range of values.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(survey_data, aes(x = lubridate::date(call_start), \n                        y = satisfaction)) +\n  # show individual data, jitter the height to avoid overlap\n  geom_jitter(width = 0, height = .1, alpha = 0.2) + \n  geom_smooth(method = lm,  formula = y~x) +\n  scale_x_date(name = \"\",\n               date_breaks = \"1 month\", \n               date_labels = \"%b\") +\n  scale_y_continuous(name = \"Caller Satisfaction\",\n                     breaks = 1:5) +\n  coord_cartesian(ylim = c(1, 5)) + # changes limits\n  ggtitle(\"2020 Caller Satisfaction\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.5.5 Overplotting\nWhen you have a limited range of numeric values, such as an ordinal rating scale, sometimes overlapping data makes it difficult to see what is going on in a point plot. For example, the plot below shows satisfaction ratings by call time, but because all the ratings are 1, 2, 3, 4 or 5, it makes it hard to see exactly how many data points there are at each point.\nIn this section, we’ll explore a few options for dealing with this.\n\nggplot(survey_data, aes(x = call_time, y = satisfaction)) + \n  geom_point()\n\n\n\n\n\n\nFigure 3.29: Overlapping data makes plots hard to understand.\n\n\n\n\n\n3.5.5.1 Jitter plot\nYou can use geom_jitter() to move the points around a bit to make them easier to see. You can also set alpha transparency. Here, the x-axis is continuous, so there is no need to jitter the width, but the y-axis is ordinal categories, so the height is jittered between -0.2 and +0.2 away from the true y-value.\n\n\n\n\n\n\nChange these values to understand what jitter is doing\n\n\n\n\n\n\n\nggplot(survey_data, aes(x = call_time, y = satisfaction)) +\n  geom_jitter(width = 0, height = .2, alpha = 0.5)\n\n\n\n\n\n\nFigure 3.30: Jitter plot.\n\n\n\n\n\n3.5.5.2 Facets\nAlternatively, you can use facet_wrap() to create a separate plot for each level of satisfaction. facet_wrap() uses the tilde (~) symbol, which you can roughly translate as “by”, e.g., facet the plot by satisfaction rating. The labeller function controls the labels above each plot. label_both specifies that we want both the variable name (satisfaction) and the value (e.g., 1) printed on the plot to make it easier to read.\n\nggplot(survey_data, aes(x = call_time)) +\n  geom_histogram(binwidth = 10, \n                 boundary = 0, \n                 fill = \"dodgerblue\", \n                 color = \"black\") +\n  facet_wrap(~satisfaction, \n             ncol = 1, # try changing this to 2 \n             labeller = label_both) +\n  scale_x_continuous(name = \"Call Time (seconds)\",\n                     breaks = seq(0, 600, 30))\n\n\n\n\n\n\nFigure 3.31: A histogram with facets.\n\n\n\n\n\n\n\n\n\n\nMore plots styles\n\n\n\nThese are not, by any means, all the plot types that you can make in R. This chapter just gave you a basic overview, and we will go into more detail in ?sec-custom-viz). The further resources section at the end of this chapter lists many resources, but the R Graph Gallery is especially useful to get inspiration for the kinds of beautiful plots you can make in R.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualisation</span>"
    ]
  },
  {
    "objectID": "03-viz.html#exercises",
    "href": "03-viz.html#exercises",
    "title": "3  Data Visualisation",
    "section": "\n3.6 Exercises",
    "text": "3.6 Exercises\nFor the final step in this chapter, we will create a report of data visualisations. You may need to refer back to Chapter 2) to help you complete these exercises and you may also want to take a break before you work through this section. We’d also recommend you knit at every step so that you can see how your output changes.\n\n3.6.1 New Markdown\nCreate and save a new R Markdown document named plots_report.Rmd and give it the title “Customer satisfaction report”. Remove the default template text and then load the packages and code below in the set-up code chunk:\n\nlibrary(tidyverse) \nlibrary(patchwork) \nlibrary(ggthemes)  \nlibrary(lubridate) \nlibrary(knitr)\nlibrary(kableExtra)\n\nsurvey_data &lt;- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n\n\n3.6.2 Summary\nCreate a level 1 heading titled “Overview”. Underneath this heading, write a short summary of what the data set contains and what each of the variables means (you can use the information from Section 3.4.1 if you like).\n\n3.6.3 Presenting plots\nPick your two favourites plots from all the examples we’ve made in this chapter. For each plot:\n\nCreate a level 2 heading in your R Markdown document and give it an informative title.\nWrite a short summary that interprets the data shown in the plots - it’s not enough just to present visualisations, effective reports will also help the reader understand the conclusions they should draw from the plots you’ve presented.\nLook through the different themes available with ggtheme and choose one to apply to your plots.\nMake sure each plot has a figure caption (either by adding this to the ggplot() code or adding it to the code chunk options).\nOrganise your Markdown so that the plots are shown after the text summary.\n\n3.6.4 Combining plots\nNow, pick your two least favourite plots:\n\nAdjust the visual aesthetics to make them look as bad and as difficult to read as possible.\nCombine the plots with the original version using patchwork functions.\nWrite a short summary that explains why you think these plots are so bad.\nOrganise your Markdown so that the plots are shown after the text summary.\n\n3.6.5 Editing your Markdown display\nAdjust the set-up of your Markdown so that your knitted report does not show any code, messages, or warnings, and all figures are 8 x 5 (see Section 2.7.1).\n\n3.6.6 Share your work\nOnce you’ve completed this activity, post it in the Week 3 channel on Teams so that you can compare which plots you chose and visual style with other learners on the course.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualisation</span>"
    ]
  },
  {
    "objectID": "03-viz.html#sec-glossary-viz",
    "href": "03-viz.html#sec-glossary-viz",
    "title": "3  Data Visualisation",
    "section": "\n3.7 Glossary",
    "text": "3.7 Glossary\n\n\n\n\n\nterm\ndefinition\n\n\n\nargument\nA variable that provides input to a function.\n\n\ncategorical\nData that can only take certain values, such as types of pet.\n\n\ncategorical\nData that can only take certain values, such as types of pet.\n\n\ncharacter\nA data type representing strings of text.\n\n\nchunk\nA section of code in an R Markdown file\n\n\ncontinuous\nData that can take on any values between other existing values.\n\n\ncontinuous\nData that can take on any values between other existing values.\n\n\ndata-type\nThe kind of data represented by an object.\n\n\ndefault-value\nA value that a function uses for an argument if it is skipped.\n\n\ndouble\nA data type representing a real decimal number\n\n\nfactor\nA data type where a specific set of values are stored with labels; An explanatory variable manipulated by the experimenter\n\n\ngeom\nThe geometric style in which data are displayed, such as boxplot, density, or histogram.\n\n\ninteger\nA data type representing whole numbers.\n\n\nknit\nTo create an HTML, PDF, or Word document from an R Markdown (Rmd) document\n\n\nlikert\nA rating scale with a small number of discrete points in order\n\n\nlogical\nA data type representing TRUE or FALSE values.\n\n\nmedian\nThe middle number in a distribution where half of the values are larger and half are smaller.\n\n\nnominal\nCategorical variables that don't have an inherent order, such as types of animal.\n\n\nnumeric\nA data type representing a real decimal number or integer.\n\n\nobservation\nAll of the data about a single trial or question.\n\n\nordinal\nDiscrete variables that have an inherent order, such as level of education or dislike/like.\n\n\noutlier\nA data point that is extremely distant from most of the other data points\n\n\nr-markdown\nThe R-specific version of markdown: a way to specify formatting, such as headers, paragraphs, lists, bolding, and links, as well as code blocks and inline code.\n\n\nstring\nA piece of text inside of quotes.\n\n\ntidy-data\nA format for data that maps the meaning onto the structure.\n\n\nvalue\nA single number or piece of data.\n\n\nvariable\n(coding): A word that identifies and stores the value of some data for later use; (stats): An attribute or characteristic of an observation that you can measure, count, or describe\n\n\nvector\nA type of data structure that collects values with the same data type, like T/F values, numbers, or strings.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualisation</span>"
    ]
  },
  {
    "objectID": "03-viz.html#sec-resources-viz",
    "href": "03-viz.html#sec-resources-viz",
    "title": "3  Data Visualisation",
    "section": "\n3.8 Further Resources",
    "text": "3.8 Further Resources\n\nggplot2 cheat sheet\n\nData visualisation using R, for researchers who don’t use R (Nordmann et al., 2021)\n\n\nChapter 1: Data Visualisation of R for Data Science\n\nggplot2 FAQs\nggplot2 documentation\n\nHack Your Data Beautiful workshop by University of Glasgow postgraduate students\n\nChapter 28: Graphics for communication of R for Data Science\n\n\ngganimate: A package for making animated plots\n\n\n\n\n\nNordmann, E., McAleer, P., Toivo, W., Paterson, H., & DeBruine, L. M. (2021). Data visualisation using R, for researchers who don’t use R. PsyArXiv. https://doi.org/10.31234/osf.io/4huvw",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualisation</span>"
    ]
  }
]